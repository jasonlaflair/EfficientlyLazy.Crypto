<!-- Sample MSBuild project file for Sandcastle.

    To build the sample, use the following command:
        msbuild example.proj

    By default, this script builds the output using the 'vs2005' look-and-feel. You
    can choose a different output style by adding one of the following options to the
    command line:
        /property:PresentationStyle=vs2010
        /property:PresentationStyle=vs2005
        /property:PresentationStyle=hana
        /property:PresentationStyle=prototype

    The default target is "Chm", which builds a CHM file for the test assembly. You can
    also specify one of the following targets on the command line:
      /target:Clean   - removes all generated files
      /target:HxS     - builds HxS file for Visual Studio 2005/2008 in addition to CHM
      /target:MSHC    - builds MSHC file for Visual Studio 2010 in addition to CHM

    NOTE: To build an HxS you must have the "Microsoft Help 2.0 SDK" installed.
 -->

<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

    <PropertyGroup>
        <!-- Project Setup -->
        <PresentationStyle Condition="'$(PresentationStyle)' == ''">vs2005</PresentationStyle>
        <OutputAssembly>test.dll</OutputAssembly>
        <OutputDir>Output</OutputDir>
        <BrandingDir>branding</BrandingDir>
				<ChmDir>chm</ChmDir>
				<Comments>comments.xml</Comments>

				<!-- MSHC Catalog -->
			  <CatalogProductFamily>VS</CatalogProductFamily>
				<CatalogProductVersion>100</CatalogProductVersion>
				<CatalogLocale>en-US</CatalogLocale>
				<Comments>comments.xml</Comments>

				<!-- Environment -->
        <ProductionTools>$(DxRoot)\ProductionTools</ProductionTools>
        <ProductionTransforms>$(DxRoot)\ProductionTransforms</ProductionTransforms>
        <Presentation>$(DxRoot)\Presentation\$(PresentationStyle)</Presentation>
    </PropertyGroup>
  
    <!--chm/hxs compiliers are installed under '$(ProgramFiles) (x86)' folder on 64-bit machine. -->
    <Choose>
      <When Condition="Exists('$(ProgramFiles) (x86)')">
        <PropertyGroup>
          <ToolsPath>$(ProgramFiles(x86))</ToolsPath>
        </PropertyGroup>
      </When>
      <Otherwise>
        <PropertyGroup>
          <ToolsPath>$(ProgramFiles)</ToolsPath>
        </PropertyGroup>
      </Otherwise>
    </Choose>
  
    <ItemGroup>
        <Compile Include="*.cs" />
    </ItemGroup>

    <Target Name="Build" DependsOnTargets="Clean;Compile;Chm" />

    <Target Name="Clean">
        <RemoveDir Directories="$(OutputDir)" ContinueOnError="true" />
        <RemoveDir Directories="$(ChmDir)" ContinueOnError="true" />
				<RemoveDir Directories="$(BrandingDir)" ContinueOnError="true" />
				<RemoveDir Directories="Intellisense" ContinueOnError="true" />
				<Delete Files="$(OutputAssembly);reflection.xml;reflection.org;manifest.xml;toc.xml;ChmProject.hhp;$(Comments);$(OutputDir).mshc" TreatErrorsAsWarnings="true" />
    </Target>

    <Target Name="Compile" Inputs="@(Compile)" Outputs="$(OutputAssembly);$(Comments)">
        <Csc Sources="@(Compile)"
             OutputAssembly="$(OutputAssembly)"
             TargetType="library"
             DocumentationFile="$(Comments)"
        />
    </Target>

    <ItemGroup>
        <IconFiles Include="$(Presentation)\icons\**\*.*" />
        <ScriptFiles Include="$(Presentation)\scripts\**\*.*" />
        <StyleFiles Include="$(Presentation)\styles\**\*.*" />
    </ItemGroup>

		<Target Name="Template" Condition="!Exists('$(OutputDir)')">
			<Copy SourceFiles="@(IconFiles)" DestinationFiles="@(IconFiles->'$(OutputDir)\icons\%(RecursiveDir)%(FileName)%(Extension)')" Condition="Exists('$(Presentation)\icons')" />
			<Copy SourceFiles="@(ScriptFiles)" DestinationFiles="@(ScriptFiles->'$(OutputDir)\scripts\%(RecursiveDir)%(FileName)%(Extension)')" Condition="Exists('$(Presentation)\scripts')" />
			<Copy SourceFiles="@(StyleFiles)" DestinationFiles="@(StyleFiles->'$(OutputDir)\styles\%(RecursiveDir)%(FileName)%(Extension)')" Condition="Exists('$(Presentation)\styles')" />
			<MakeDir Directories="$(OutputDir)\html;Intellisense" />
    </Target>

		<Target Name="Branding" Condition="'$(PresentationStyle)' == 'vs2010'" DependsOnTargets="Template"
						Inputs="$(Presentation)\branding\branding.xml;$(Presentation)\branding\dev10.mshc"
						Outputs="$(BrandingDir)\branding.xml">
			<Exec Command='"$(ProductionTools)\MSHCPackager.exe" /extract /r "$(Presentation)\branding\dev10.mshc" "$(OutputDir)\branding" "/manifest:$(Presentation)\branding\dev10.manifest" /arg:noTransforms'/>
			<Exec Command='"$(ProductionTools)\MSHCPackager.exe" /extract /r "$(Presentation)\branding\dev10.mshc" "$(BrandingDir)" "/manifest:$(Presentation)\branding\dev10.manifest" /arg:onlyTransforms'/>
			<Exec Command='"$(ProductionTools)\MSHCPackager.exe" /copy /r "$(OutputDir)\branding" "/manifest:$(Presentation)\branding\branding.manifest" /arg:noTransforms'/>
			<Exec Command='"$(ProductionTools)\MSHCPackager.exe" /copy /r "$(BrandingDir)" "/manifest:$(Presentation)\branding\branding.manifest" /arg:onlyTransforms'/>
			<Exec Command='"$(ProductionTools)\XslTransform.exe" /xsl:"$(Presentation)\copyBranding.xsl" "$(Presentation)\branding\branding.xml" /out:"$(BrandingDir)\branding.xml" /w /arg:catalogProductFamily=$(CatalogProductFamily),catalogProductVersion=$(CatalogProductVersion),catalogLocale=$(CatalogLocale)'/>
		</Target>

		<Target Name="BrandingMSHC" Condition="'$(PresentationStyle)' == 'vs2010'" DependsOnTargets="Template"
						Inputs="$(Presentation)\branding\branding.xml;$(Presentation)\branding\dev10.mshc"
						Outputs="$(BrandingDir)\branding.xml">
			<Exec Command='"$(ProductionTools)\MSHCPackager.exe" /extract /r "$(Presentation)\branding\dev10.mshc" "$(OutputDir)\icons" "/manifest:$(Presentation)\branding\dev10.manifest" /arg:onlyIcons'/>
			<Exec Command='"$(ProductionTools)\MSHCPackager.exe" /extract /r "$(Presentation)\branding\dev10.mshc" "$(BrandingDir)" "/manifest:$(Presentation)\branding\dev10.manifest" /arg:noIcons'/>
			<Exec Command='"$(ProductionTools)\MSHCPackager.exe" /copy /r "$(OutputDir)\icons" "/manifest:$(Presentation)\branding\branding.manifest" /arg:onlyIcons'/>
			<Exec Command='"$(ProductionTools)\MSHCPackager.exe" /copy /r "$(BrandingDir)" "/manifest:$(Presentation)\branding\branding.manifest" /arg:noIcons'/>
			<Exec Command='"$(ProductionTools)\XslTransform.exe" /xsl:"$(Presentation)\copyBranding.xsl" "$(Presentation)\branding\branding.xml" /out:"$(BrandingDir)\branding.xml" /w /arg:catalogProductFamily=$(CatalogProductFamily),catalogProductVersion=$(CatalogProductVersion),catalogLocale=$(CatalogLocale)'/>
		</Target>

		<Target Name="ReflectionData" DependsOnTargets="Template" Inputs="$(OutputAssembly)" Outputs="reflection.xml">
        <Exec Command='"$(ProductionTools)\MRefBuilder.exe" "$(OutputAssembly)" /out:"$(OutputDir)\reflection_base.xml"' />
        <Exec Condition="'$(PresentationStyle)' == 'prototype'" Command='"$(ProductionTools)\XslTransform.exe" /xsl:"$(ProductionTransforms)\ApplyPrototypeDocModel.xsl" /xsl:"$(ProductionTransforms)\AddGuidFilenames.xsl"     "$(OutputDir)\reflection_base.xml" /out:"reflection.xml"' />
				<Exec Condition="'$(PresentationStyle)' == 'vs2010'"    Command='"$(ProductionTools)\XslTransform.exe" /xsl:"$(ProductionTransforms)\ApplyVSDocModel.xsl"        /xsl:"$(ProductionTransforms)\AddFriendlyFilenames.xsl" "$(OutputDir)\reflection_base.xml" /out:"reflection.xml" /arg:IncludeAllMembersTopic=true  /arg:IncludeInheritedOverloadTopics=false' />
				<Exec Condition="'$(PresentationStyle)' == 'vs2005'"    Command='"$(ProductionTools)\XslTransform.exe" /xsl:"$(ProductionTransforms)\ApplyVSDocModel.xsl"        /xsl:"$(ProductionTransforms)\AddFriendlyFilenames.xsl" "$(OutputDir)\reflection_base.xml" /out:"reflection.xml" /arg:IncludeAllMembersTopic=true  /arg:IncludeInheritedOverloadTopics=false' />
        <Exec Condition="'$(PresentationStyle)' == 'hana'"      Command='"$(ProductionTools)\XslTransform.exe" /xsl:"$(ProductionTransforms)\ApplyVSDocModel.xsl"        /xsl:"$(ProductionTransforms)\AddFriendlyFilenames.xsl" "$(OutputDir)\reflection_base.xml" /out:"reflection.xml" /arg:IncludeAllMembersTopic=false /arg:IncludeInheritedOverloadTopics=false' />
    </Target>

    <Target Name="Manifest" DependsOnTargets="ReflectionData" Inputs="reflection.xml" Outputs="$(OutputDir)\manifest.xml">
        <Exec Command='"$(ProductionTools)\XslTransform.exe" /xsl:"$(ProductionTransforms)\ReflectionToManifest.xsl" "reflection.xml" /out:"$(OutputDir)\manifest.xml"' />
    </Target>

    <Target Name="Html"
            Inputs="$(OutputDir)\manifest.xml;reflection.xml;$(Comments)"
            Outputs="$(DocumentationDir)\html\*.htm"
            DependsOnTargets="Branding;Manifest">
        <Exec Command='"$(ProductionTools)\BuildAssembler.exe" /config:"$(Presentation)\configuration\sandcastle.config" "$(OutputDir)\manifest.xml"' />
    </Target>

    <Target Name="Chm"
            Inputs="$(DocumentationDir)\html\*.htm;reflection.xml"
            Outputs="$(OutputDir)\test.chm;$(OutputDir)\toc.xml"
            DependsOnTargets="Html">

        <Exec Condition="'$(PresentationStyle)' == 'prototype'" Command='"$(ProductionTools)\XslTransform.exe" /xsl:"$(ProductionTransforms)\CreatePrototypeToc.xsl" reflection.xml /out:"$(OutputDir)\Toc.xml"' />
        <Exec Condition="'$(PresentationStyle)' != 'prototype'" Command='"$(ProductionTools)\XslTransform.exe" /xsl:"$(ProductionTransforms)\CreateVSToc.xsl"        reflection.xml /out:"$(OutputDir)\Toc.xml"' />

        <MakeDir Directories="$(chmDir)"           Condition="!Exists('$(chmDir)')" />
        <MakeDir Directories="$(chmDir)\Html"      Condition="!Exists('$(chmDir)\Html')" />
        <MakeDir Directories="$(chmDir)\Icons"     Condition="!Exists('$(chmDir)\Icons') and Exists('$(OutputDir)\Icons')" />
        <MakeDir Directories="$(chmDir)\Scripts"   Condition="!Exists('$(chmDir)\Scripts') and Exists('$(OutputDir)\Scripts')" />
        <MakeDir Directories="$(chmDir)\Styles"    Condition="!Exists('$(chmDir)\Styles') and Exists('$(OutputDir)\Styles')" />
				<MakeDir Directories="$(chmDir)\Branding"  Condition="!Exists('$(chmDir)\Branding') and Exists('$(OutputDir)\Branding')" />

        <!--copy directories from hxs -->
        <Exec Command="xcopy.exe $(OutputDir)\Icons\* $(chmDir)\Icons\ /y /r /i"        Condition="Exists('$(chmDir)\Icons') and Exists('$(OutputDir)\Icons')" />
        <Exec Command="xcopy.exe $(OutputDir)\Scripts\* $(chmDir)\Scripts\ /y /r /i"    Condition="Exists('$(chmDir)\Scripts') and Exists('$(OutputDir)\Scripts')" />
        <Exec Command="xcopy.exe $(OutputDir)\Styles\* $(chmDir)\Styles\ /y /r /i"      Condition="Exists('$(chmDir)\Styles') and Exists('$(OutputDir)\Styles')" />
				<Exec Command="xcopy.exe $(OutputDir)\Branding\* $(chmDir)\Branding\ /y /r /i"  Condition="Exists('$(chmDir)\Branding') and Exists('$(OutputDir)\Branding')" />

        <!-- generate CHM-specific HTML and HH* files -->
        <Exec Command="&quot;$(ProductionTools)\ChmBuilder.exe&quot; /project:test /html:$(OutputDir)\html /lcid:1033 /toc:$(OutputDir)\Toc.xml /out:$(chmDir)" />

        <Exec Command="&quot;$(ProductionTools)\DBCSFix.exe&quot; /d:$(chmDir) /l:1033" />

        <Exec Command='"$(ToolsPath)\HTML Help Workshop\hhc.exe" "$(chmDir)\test.hhp"' IgnoreExitCode="true" />
    </Target>

    <Target Name="HxS"
            DependsOnTargets="Build"
            Inputs="$(DocumentationDir)\html\*.htm;$(OutputDir)\toc.xml"
						Outputs="$(OutputDir)\test.hxs"
						Condition="'$(PresentationStyle)' != 'vs2010'">
				<Copy SourceFiles="@(HxsFiles)" DestinationFiles="@(HxsFiles->'$(OutputDir)\%(RecursiveDir)%(FileName)%(Extension)')" />
        <Exec Command='"$(DXROOT)\Presentation\shared\copyhavana.bat" test' />
        <Exec Command='"$(ProductionTools)\XslTransform.exe" /xsl:"$(ProductionTransforms)\CreateHxc.xsl"        $(OutputDir)\toc.xml /out:"$(OutputDir)\test.HxC" /arg:fileNamePrefix=test' />
        <Exec Command='"$(ProductionTools)\XslTransform.exe" /xsl:"$(ProductionTransforms)\TocToHxSContents.xsl" $(OutputDir)\toc.xml /out:"$(OutputDir)\test.HxT"' />
        <Exec Command='"$(ToolsPath)\Microsoft Help 2.0 SDK\hxcomp.exe" -p $(OutputDir)\test.hxc' IgnoreExitCode="true" />
    </Target>

    <Target Name="MSHC"
            Inputs="$(OutputDir)\manifest.xml;reflection.xml;$(Comments)"
            Outputs="$(DocumentationDir)\html\*.htm;$(OutputDir)\toc.xml"
            DependsOnTargets="Clean;Compile;BrandingMSHC;Manifest"
						Condition="'$(PresentationStyle)' == 'vs2005' or '$(PresentationStyle)' == 'vs2010'">
        <Exec Command='"$(ProductionTools)\XslTransform.exe" /xsl:"$(ProductionTransforms)\CreateVSToc.xsl" reflection.xml /out:"toc.xml"' />
        <Exec Command='"$(ProductionTools)\BuildAssembler.exe" /config:"$(Presentation)\configuration\sandcastle-mshc.config" "$(OutputDir)\manifest.xml"' />
  			<Exec Command='"$(ProductionTools)\MSHCPackager.exe" /save /r "$(OutputDir)" "$(OutputDir).mshc"' />
		</Target>

</Project>
