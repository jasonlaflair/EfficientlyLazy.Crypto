<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>MbUnit</name>
  </assembly>
  <members>
    <member name="T:MbUnit.Core.MbUnitTestFramework">
      <summary>
            The MbUnit test framework.
            </summary>
    </member>
    <member name="M:MbUnit.Core.MbUnitTestFramework.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Core.MbUnitTestFramework" /> class</summary>
    </member>
    <member name="M:MbUnit.Core.MbUnitTestFramework.GetExtensions(Gallio.Common.Reflection.IAssemblyInfo)">
      <summary>
            Gets information about a particular pattern test framework extension.
            </summary>
      <param name="assembly">The test assembly.</param>
      <returns>The pattern test framework extension information.</returns>
    </member>
    <member name="P:MbUnit.Core.MbUnitTestFramework.VersionLabel">
      <summary>
            Gets the MbUnit version label.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.AnnotationAttribute">
      <summary>
            Associates an annotation message of the specified type with the code element.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.AnnotationAttribute.#ctor(Gallio.Model.AnnotationType,System.String)">
      <summary>
            Associates an annotation message of the specified type with the code element.
            </summary>
      <param name="type">The annotation type.</param>
      <param name="message">The annotation message.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="message" /> is null.</exception>
    </member>
    <member name="T:MbUnit.Framework.ApartmentStateAttribute">
      <summary>
            Sets the apartment state to be used to run the decorated test and its children
            unless subsequently overridden.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ApartmentStateAttribute.#ctor(System.Threading.ApartmentState)">
      <summary>
            Sets the apartment state to be used to run the decorated test and its children
            unless subsequently overridden.
            </summary>
      <param name="apartmentState">The apartment state to use.</param>
    </member>
    <member name="P:MbUnit.Framework.ApartmentStateAttribute.ApartmentState">
      <summary>
            Gets the apartment state to be used to run the decorated test.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ApartmentStateAttribute.DecorateTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Applies decorations to a test.
            </summary>
      <param name="scope">The scope.</param>
      <param name="codeElement">The code element.</param>
    </member>
    <member name="T:MbUnit.Framework.AssemblyFixtureAttribute">
      <summary>
            Declares that a class contains assembly-level setup and teardown methods.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.AssemblyFixtureAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.AssemblyFixtureAttribute" /> class</summary>
    </member>
    <member name="M:MbUnit.Framework.AssemblyFixtureAttribute.Consume(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo,System.Boolean)">
      <summary>
            Consumes a code element and applies its contributions to the scope
            provided by a containing pattern.
            </summary>
      <param name="containingScope">The containing scope.</param>
      <param name="codeElement">The code element to process.</param>
      <param name="skipChildren">If true, skips generating child test components.
            Instead the children may be populated on demand using
            <see cref="M:Gallio.Framework.Pattern.IPatternScope.AddDeferredComponentPopulator(Gallio.Framework.Pattern.DeferredComponentPopulator)" />.  The implementation
            may safely ignore the value of this flag so long as subsequent attempts to populate children on
            demand are idempotent (do nothing or have no adverse side-effects).</param>
      <exception cref="T:Gallio.Framework.Pattern.PatternUsageErrorException">May be thrown to halt processing of the pattern
            and report an error message to the user as an annotation that describes how the
            pattern was misapplied.</exception>
    </member>
    <member name="M:MbUnit.Framework.AssemblyFixtureAttribute.SetTestSemantics(Gallio.Framework.Pattern.ITestBuilder,Gallio.Common.Reflection.ITypeInfo)">
      <summary>
            Applies semantic actions to a test to estalish its runtime behavior.
            </summary>
      <param name="testBuilder">The test builder.</param>
      <param name="type">The test type.</param>
    </member>
    <member name="M:MbUnit.Framework.AssemblyFixtureAttribute.Validate(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ITypeInfo)">
      <summary>
            Verifies that the attribute is being used correctly.
            </summary>
      <param name="containingScope">The containing scope.</param>
      <param name="type">The type.</param>
      <exception cref="T:Gallio.Framework.Pattern.PatternUsageErrorException">Thrown if the attribute is being used incorrectly.</exception>
    </member>
    <member name="T:MbUnit.Framework.AssemblyResolverAttribute">
      <summary>
            Registers a custom assembly resolver.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.AssemblyResolverAttribute.#ctor(System.Type)">
      <summary>
            Registers a custom assembly resolver.
            </summary>
      <param name="assemblyResolverType">The assembly resolver type, must
            implement <see cref="T:Gallio.Runtime.Loader.IAssemblyResolver" />.</param>
    </member>
    <member name="P:MbUnit.Framework.AssemblyResolverAttribute.AssemblyResolverType">
      <summary>
            Gets the assembly resolver type.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.AssemblyResolverAttribute.Initialize(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.IAssemblyInfo)">
      <summary>
            Performs early initialization for the specified assembly.
            </summary>
      <param name="rootScope">The root scope that will eventually contain the assembly-level test.</param>
      <param name="assembly">The assembly to process.</param>
    </member>
    <member name="T:MbUnit.Framework.Assert">
      <summary>
            Defines a set of assertions that enable a test to verify the expected
            behavior of the subject under test.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.#ctor">
      <summary>
            Prevents instantiation.
            Subclasses should likewise define their constructor to be protected.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreApproximatelyEqual``2(``0,``0,``1)">
      <summary>
            Verifies that an actual value approximately equals some expected value
            to within a specified delta.
            </summary>
      <param name="expectedValue">The expected value.</param>
      <param name="actualValue">The actual value.</param>
      <param name="delta">The inclusive delta between the values.</param>
      <typeparam name="TValue">The type of values to be compared.</typeparam>
      <typeparam name="TDifference">The type of the difference produced when the values are
            subtracted, for numeric types this is the same as <typeparamref name="TValue" /> but it
            may differ for other types.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreApproximatelyEqual``2(``0,``0,``1,System.String,System.Object[])">
      <summary>
            Verifies that an actual value approximately equals some expected value
            to within a specified delta.
            </summary>
      <param name="expectedValue">The expected value.</param>
      <param name="actualValue">The actual value.</param>
      <param name="delta">The inclusive delta between the values.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="TValue">The type of values to be compared.</typeparam>
      <typeparam name="TDifference">The type of the difference produced when the values are
            subtracted, for numeric types this is the same as <typeparamref name="TValue" /> but it
            may differ for other types.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Verifies that expected and actual sequences have the same number of elements and
            that the elements are equal and in the same order.
            </summary>
      <param name="expectedSequence">The expected sequence.</param>
      <param name="actualSequence">The actual sequence.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Gallio.Common.EqualityComparison{``0})">
      <summary>
            Verifies that expected and actual sequences have the same number of elements and
            that the elements are equal and in the same order.
            </summary>
      <param name="expectedSequence">The expected sequence.</param>
      <param name="actualSequence">The actual sequence.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Gallio.Common.EqualityComparison{``0},System.String,System.Object[])">
      <summary>
            Verifies that expected and actual sequences have the same number of elements and
            that the elements are equal and in the same order.
            </summary>
      <param name="expectedSequence">The expected sequence.</param>
      <param name="actualSequence">The actual sequence.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Verifies that expected and actual sequences have the same number of elements and
            that the elements are equal and in the same order.
            </summary>
      <param name="expectedSequence">The expected sequence.</param>
      <param name="actualSequence">The actual sequence.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
      <summary>
            Verifies that expected and actual sequences have the same number of elements and
            that the elements are equal and in the same order.
            </summary>
      <param name="expectedSequence">The expected sequence.</param>
      <param name="actualSequence">The actual sequence.</param>
      <param name="comparer">The comparer to use.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
      <summary>
            Verifies that expected and actual sequences have the same number of elements and
            that the elements are equal and in the same order.
            </summary>
      <param name="expectedSequence">The expected sequence.</param>
      <param name="actualSequence">The actual sequence.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqualIgnoringOrder``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Verifies that expected and actual sequences have the same number of elements and
            that the elements are equal but perhaps in a different order.
            </summary>
      <param name="expectedSequence">The expected sequence.</param>
      <param name="actualSequence">The actual sequence.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqualIgnoringOrder``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Gallio.Common.EqualityComparison{``0})">
      <summary>
            Verifies that expected and actual sequences have the same number of elements and
            that the elements are equal but perhaps in a different order.
            </summary>
      <param name="expectedSequence">The expected sequence.</param>
      <param name="actualSequence">The actual sequence.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqualIgnoringOrder``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Gallio.Common.EqualityComparison{``0},System.String,System.Object[])">
      <summary>
            Verifies that expected and actual sequences have the same number of elements and
            that the elements are equal but perhaps in a different order.
            </summary>
      <param name="expectedSequence">The expected sequence.</param>
      <param name="actualSequence">The actual sequence.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqualIgnoringOrder``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Verifies that expected and actual sequences have the same number of elements and
            that the elements are equal but perhaps in a different order.
            </summary>
      <param name="expectedSequence">The expected sequence.</param>
      <param name="actualSequence">The actual sequence.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqualIgnoringOrder``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
      <summary>
            Verifies that expected and actual sequences have the same number of elements and
            that the elements are equal but perhaps in a different order.
            </summary>
      <param name="expectedSequence">The expected sequence.</param>
      <param name="actualSequence">The actual sequence.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsEqualIgnoringOrder``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
      <summary>
            Verifies that expected and actual sequences have the same number of elements and
            that the elements are equal but perhaps in a different order.
            </summary>
      <param name="expectedSequence">The expected sequence.</param>
      <param name="actualSequence">The actual sequence.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsNotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Verifies that unexpected and actual sequences differ in at least one element.
            </summary>
      <param name="unexpectedSequence">The unexpected sequence.</param>
      <param name="actualSequence">The actual sequence.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsNotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Gallio.Common.EqualityComparison{``0})">
      <summary>
            Verifies that unexpected and actual sequences differ in at least one element.
            </summary>
      <param name="unexpectedSequence">The unexpected sequence.</param>
      <param name="actualSequence">The actual sequence.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsNotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},Gallio.Common.EqualityComparison{``0},System.String,System.Object[])">
      <summary>
            Verifies that unexpected and actual sequences differ in at least one element.
            </summary>
      <param name="unexpectedSequence">The unexpected sequence.</param>
      <param name="actualSequence">The actual sequence.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsNotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Verifies that unexpected and actual sequences differ in at least one element.
            </summary>
      <param name="unexpectedSequence">The unexpected sequence.</param>
      <param name="actualSequence">The actual sequence.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsNotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
      <summary>
            Verifies that unexpected and actual sequences differ in at least one element.
            </summary>
      <param name="unexpectedSequence">The unexpected sequence.</param>
      <param name="actualSequence">The actual sequence.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreElementsNotEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
      <summary>
            Verifies that unexpected and actual sequences differ in at least one element.
            </summary>
      <param name="unexpectedSequence">The unexpected sequence.</param>
      <param name="actualSequence">The actual sequence.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.String,System.String,System.StringComparison)">
      <summary>
            Asserts that two strings are equal according to a particular string comparison mode.
            </summary>
      <param name="expectedValue">The expected value.</param>
      <param name="actualValue">The actual value.</param>
      <param name="comparisonType">The string comparison type.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual(System.String,System.String,System.StringComparison,System.String,System.Object[])">
      <summary>
            Asserts that two strings are equal according to a particular string comparison mode.
            </summary>
      <param name="expectedValue">The expected value.</param>
      <param name="actualValue">The actual value.</param>
      <param name="comparisonType">The string comparison type.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual``1(``0,``0)">
      <summary>
            Verifies that an actual value equals some expected value.
            </summary>
      <param name="expectedValue">The expected value.</param>
      <param name="actualValue">The actual value.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual``1(``0,``0,Gallio.Common.EqualityComparison{``0})">
      <summary>
            Verifies that an actual value equals some expected value according to a particular comparer.
            </summary>
      <param name="expectedValue">The expected value.</param>
      <param name="actualValue">The actual value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual``1(``0,``0,Gallio.Common.EqualityComparison{``0},System.String,System.Object[])">
      <summary>
            Verifies that an actual value equals some expected value according to a particular comparer.
            </summary>
      <param name="expectedValue">The expected value.</param>
      <param name="actualValue">The actual value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Verifies that an actual value equals some expected value according to a particular comparer.
            </summary>
      <param name="expectedValue">The expected value.</param>
      <param name="actualValue">The actual value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
      <summary>
            Verifies that an actual value equals some expected value according to a particular comparer.
            </summary>
      <param name="expectedValue">The expected value.</param>
      <param name="actualValue">The actual value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreEqual``1(``0,``0,System.String,System.Object[])">
      <summary>
            Verifies that an actual value equals some expected value.
            </summary>
      <param name="expectedValue">The expected value.</param>
      <param name="actualValue">The actual value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotApproximatelyEqual``2(``0,``0,``1)">
      <summary>
            Verifies that an actual value does not approximately equal some unexpected value
            to within a specified delta.
            </summary>
      <param name="unexpectedValue">The expected value.</param>
      <param name="actualValue">The actual value.</param>
      <param name="delta">The inclusive delta between the values.</param>
      <typeparam name="TValue">The type of values to be compared.</typeparam>
      <typeparam name="TDifference">The type of the difference produced when the values are
            subtracted, for numeric types this is the same as <typeparamref name="TValue" /> but it
            may differ for other types.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotApproximatelyEqual``2(``0,``0,``1,System.String,System.Object[])">
      <summary>
            Verifies that an actual value does not approximately equal some unexpected value
            to within a specified delta.
            </summary>
      <param name="unexpectedValue">The expected value.</param>
      <param name="actualValue">The actual value.</param>
      <param name="delta">The inclusive delta between the values.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="TValue">The type of values to be compared.</typeparam>
      <typeparam name="TDifference">The type of the difference produced when the values are
            subtracted, for numeric types this is the same as <typeparamref name="TValue" /> but it
            may differ for other types.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.String,System.String,System.StringComparison)">
      <summary>
            Asserts that two strings are not equal according to a particular string comparison mode.
            </summary>
      <param name="unexpectedValue">The unexpected value.</param>
      <param name="actualValue">The actual value.</param>
      <param name="comparisonType">The string comparison type.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual(System.String,System.String,System.StringComparison,System.String,System.Object[])">
      <summary>
            Asserts that two strings are not equal according to a particular string comparison mode.
            </summary>
      <param name="unexpectedValue">The unexpected value.</param>
      <param name="actualValue">The actual value.</param>
      <param name="comparisonType">The string comparison type.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual``1(``0,``0)">
      <summary>
            Verifies that an actual value does not equal some unexpected value.
            </summary>
      <param name="unexpectedValue">The unexpected value.</param>
      <param name="actualValue">The actual value.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual``1(``0,``0,Gallio.Common.EqualityComparison{``0})">
      <summary>
            Verifies that an actual value does not equal some unexpected value according to a particular comparer.
            </summary>
      <param name="unexpectedValue">The unexpected value.</param>
      <param name="actualValue">The actual value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual``1(``0,``0,Gallio.Common.EqualityComparison{``0},System.String,System.Object[])">
      <summary>
            Verifies that an actual value does not equal some unexpected value according to a particular comparer.
            </summary>
      <param name="unexpectedValue">The unexpected value.</param>
      <param name="actualValue">The actual value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Verifies that an actual value does not equal some unexpected value according to a particular comparer.
            </summary>
      <param name="unexpectedValue">The unexpected value.</param>
      <param name="actualValue">The actual value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual``1(``0,``0,System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
      <summary>
            Verifies that an actual value does not equal some unexpected value according to a particular comparer.
            </summary>
      <param name="unexpectedValue">The unexpected value.</param>
      <param name="actualValue">The actual value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotEqual``1(``0,``0,System.String,System.Object[])">
      <summary>
            Verifies that an actual value does not equal some unexpected value.
            </summary>
      <param name="unexpectedValue">The unexpected value.</param>
      <param name="actualValue">The actual value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotSame``1(``0,``0)">
      <summary>
            Verifies that an actual value is not referentially identical to some unexpected value.
            </summary>
      <param name="unexpectedValue">The unexpected value.</param>
      <param name="actualValue">The actual value.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreNotSame``1(``0,``0,System.String,System.Object[])">
      <summary>
            Verifies that an actual value is not referentially identical to some unexpected value.
            </summary>
      <param name="unexpectedValue">The unexpected value.</param>
      <param name="actualValue">The actual value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreSame``1(``0,``0)">
      <summary>
            Verifies that an actual value is referentially identical to some expected value.
            </summary>
      <param name="expectedValue">The expected value.</param>
      <param name="actualValue">The actual value.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.AreSame``1(``0,``0,System.String,System.Object[])">
      <summary>
            Verifies that an actual value is referentially identical to some expected value.
            </summary>
      <param name="expectedValue">The expected value.</param>
      <param name="actualValue">The actual value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between``1(``0,``0,``0)">
      <summary>
            Verifies that a test value is between left and right values according to a particular comparer.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="minimum">Inclusive minimum value.</param>
      <param name="maximum">Inclusive maximum value.</param>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
      <summary>
            Verifies that a test value is between left and right values according to a particular comparer.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="minimum">Inclusive minimum value.</param>
      <param name="maximum">Inclusive maximum value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between``1(``0,``0,``0,System.Collections.Generic.IComparer{``0},System.String,System.Object[])">
      <summary>
            Verifies that a test value is between left and right values according to a particular comparer.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="minimum">Inclusive minimum value.</param>
      <param name="maximum">Inclusive maximum value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between``1(``0,``0,``0,System.Comparison{``0})">
      <summary>
            Verifies that a test value is between left and right values according to a particular comparer.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="minimum">Inclusive minimum value.</param>
      <param name="maximum">Inclusive maximum value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between``1(``0,``0,``0,System.Comparison{``0},System.String,System.Object[])">
      <summary>
            Verifies that a test value is between left and right values according to a particular comparer.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="minimum">Inclusive minimum value.</param>
      <param name="maximum">Inclusive maximum value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Between``1(``0,``0,``0,System.String,System.Object[])">
      <summary>
            Verifies that a test value is between left and right values according to a particular comparer.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="minimum">Inclusive minimum value.</param>
      <param name="maximum">Inclusive maximum value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.BinaryDeserialize``1(System.IO.Stream)">
      <summary>
            Verifies that an object can be deserialized from a stream using a
            <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" /> and returns the resulting deserialized object.
            </summary>
      <param name="stream">The stream to deserialize.</param>
      <returns>The deserialized object.</returns>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.BinaryDeserialize``1(System.IO.Stream,System.String,System.Object[])">
      <summary>
            Verifies that an object can be deserialized from a stream using a
            <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" /> and returns the resulting deserialized object.
            </summary>
      <param name="stream">The stream to deserialize.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <returns>The deserialized object.</returns>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.BinarySerialize(System.Object)">
      <summary>
            Verifies that an object can be serialized to a stream using a <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" />
            and returns the resulting stream.
            </summary>
      <param name="value">The value.</param>
      <returns>The serialized stream.</returns>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.BinarySerialize(System.Object,System.String,System.Object[])">
      <summary>
            Verifies that an object can be serialized to a stream using a <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" />
            and returns the resulting stream.
            </summary>
      <param name="value">The value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <returns>The serialized stream.</returns>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.BinarySerializeThenDeserialize``1(``0)">
      <summary>
            Verifies that an object can be serialized then deserialized to and from a stream using a
            <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" /> and returns the resulting deserialized object.
            </summary>
      <param name="value">The value.</param>
      <returns>The serialized then deserialized object.</returns>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.BinarySerializeThenDeserialize``1(``0,System.String,System.Object[])">
      <summary>
            Verifies that an object can be serialized and deserialized to and from a stream using a
            <see cref="T:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter" /> and returns the resulting deserialized object.
            </summary>
      <param name="value">The value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <returns>The serialized then deserialized object.</returns>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
            Verifies that <paramref name="expectedValue" /> is in the enumeration <paramref name="enumeration" />.
            </summary>
      <param name="enumeration">The enumeration of items.</param>
      <param name="expectedValue">The expected value expected to be found in the collection.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.String,System.Object[])">
      <summary>
            Verifies that <paramref name="expectedValue" /> is in the enumeration <paramref name="enumeration" />.
            </summary>
      <param name="enumeration">The enumeration of items.</param>
      <param name="expectedValue">The expected value expected to be found in the collection.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Contains(System.String,System.String)">
      <summary>
            Verifies that a string contains some expected value.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="expectedSubstring">The expected substring.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedSubstring" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Contains(System.String,System.String,System.String,System.Object[])">
      <summary>
            Verifies that a string contains some expected value.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="expectedSubstring">The expected substring.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedSubstring" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.ContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
      <summary>
            Verifies that <paramref name="expectedKey" /> is in the dictionary <paramref name="dictionary" />.
            </summary>
      <param name="dictionary">The dictionary of items.</param>
      <param name="expectedKey">The key expected to be found in the dictionary.</param>
      <typeparam name="TKey">The type of key.</typeparam>
      <typeparam name="TValue">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.ContainsKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.String,System.Object[])">
      <summary>
            Verifies that <paramref name="expectedKey" /> is in the dictionary <paramref name="dictionary" />.
            </summary>
      <param name="dictionary">The dictionary of items.</param>
      <param name="expectedKey">The key expected to be found in the dictionary.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="TKey">The type of key.</typeparam>
      <typeparam name="TValue">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Deserialize``1(System.IO.Stream,System.Runtime.Serialization.IFormatter)">
      <summary>
            Verifies that an object can be deserialized from a stream using the
            specified <see cref="T:System.Runtime.Serialization.IFormatter" /> and returns the resulting deserialized object.
            </summary>
      <param name="stream">The stream to deserialize.</param>
      <param name="formatter">The object serialization formatter.</param>
      <returns>The deserialized object.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="formatter" /> is null.</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Deserialize``1(System.IO.Stream,System.Runtime.Serialization.IFormatter,System.String,System.Object[])">
      <summary>
            Verifies that an object can be deserialized from a stream using the specified
            <see cref="T:System.Runtime.Serialization.IFormatter" /> and returns the resulting deserialized object.
            </summary>
      <param name="stream">The stream to deserialize.</param>
      <param name="formatter">The object serialization formatter.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <returns>The deserialized object.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="formatter" /> is null.</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>
            Verifies that the sequence of objects contains distinct values.
            </summary>
      <param name="values">The sequence of values to be tested.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Distinct``1(System.Collections.Generic.IEnumerable{``0},Gallio.Common.EqualityComparison{``0})">
      <summary>
            Verifies that the sequence of objects contains distinct values.
            </summary>
      <param name="values">The sequence of values to be tested.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Distinct``1(System.Collections.Generic.IEnumerable{``0},Gallio.Common.EqualityComparison{``0},System.String,System.Object[])">
      <summary>
            Verifies that the sequence of objects contains distinct values.
            </summary>
      <param name="values">The sequence of values to be tested.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Verifies that the sequence of objects contains distinct values.
            </summary>
      <param name="values">The sequence of values to be tested.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.String,System.Object[])">
      <summary>
            Verifies that the sequence of objects contains distinct values.
            </summary>
      <param name="values">The sequence of values to be tested.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.String,System.Object[])">
      <summary>
            Verifies that the sequence of objects contains distinct values.
            </summary>
      <param name="values">The sequence of values to be tested.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.DoesNotContain``1(System.Collections.Generic.IEnumerable{``0},``0)">
      <summary>
            Verifies that <paramref name="unexpectedValue" /> is not in the enumeration <paramref name="enumeration" />.
            </summary>
      <param name="enumeration">The enumeration of items.</param>
      <param name="unexpectedValue">The unexpected value.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.DoesNotContain``1(System.Collections.Generic.IEnumerable{``0},``0,System.String,System.Object[])">
      <summary>
            Verifies that <paramref name="unexpectedValue" /> is not in the enumeration <paramref name="enumeration" />.
            </summary>
      <param name="enumeration">The enumeration of items.</param>
      <param name="unexpectedValue">The unexpected value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.DoesNotContain(System.String,System.String)">
      <summary>
            Verifies that a string does not contain some unexpected substring.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="unexpectedSubstring">The unexpected substring.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="unexpectedSubstring" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.DoesNotContain(System.String,System.String,System.String,System.Object[])">
      <summary>
            Verifies that a string does not contain some unexpected substring.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="unexpectedSubstring">The unexpected substring.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="unexpectedSubstring" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.DoesNotContainKey``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
      <summary>
            Verifies that <paramref name="unexpectedKey" /> is not in the dictionary <paramref name="dictionary" />.
            </summary>
      <param name="dictionary">The dictionary of items.</param>
      <param name="unexpectedKey">The key that should not be found in the dictionary.</param>
      <typeparam name="TKey">The type of key.</typeparam>
      <typeparam name="TValue">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.DoesNotContainKey``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.String,System.Object[])">
      <summary>
            Verifies that <paramref name="unexpectedKey" /> is not in the dictionary <paramref name="dictionary" />.
            </summary>
      <param name="dictionary">The dictionary of items.</param>
      <param name="unexpectedKey">The key expected to be found in the dictionary.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="TKey">The type of key.</typeparam>
      <typeparam name="TValue">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.DoesNotThrow(Gallio.Common.Action)">
      <summary>
            Verifies that a block of code does not throw an exception of any type.
            </summary>
      <param name="action">The action delegate to evaluate.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action" /> is null.</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.DoesNotThrow(Gallio.Common.Action,System.String,System.Object[])">
      <summary>
            Verifies that a block of code does not throw an exception of any type.
            </summary>
      <param name="action">The action delegate to evaluate.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action" /> is null.</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.EndsWith(System.String,System.String)">
      <summary>
            Verifies that a string ends with the specified text.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="expectedText">The expected pattern.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedText" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.EndsWith(System.String,System.String,System.String,System.Object[])">
      <summary>
            Verifies that a string ends with the specified text.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="expectedText">The expected pattern.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedText" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Equals(System.Object,System.Object)">
      <summary>
            Always throws an <see cref="T:System.InvalidOperationException" />.
            Use <see cref="M:MbUnit.Framework.Assert.AreEqual``1(``0,``0)" /> instead.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary>
            Verifies that at least one element of the sequence meets the specified condition.
            </summary>
      <param name="values">The sequence of values to evaluate.</param>
      <param name="predicate">The condition that must be fulfilled (returns <c>true</c>) by at least one element of the sequence.</param>
      <typeparam name="T">The type of values in the sequence.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.String,System.Object[])">
      <summary>
            Verifies that at least one element of the sequence meets the specified condition.
            </summary>
      <param name="values">The sequence of values to evaluate.</param>
      <param name="predicate">The condition that must be fulfilled (returns <c>true</c>) by at least one element of the sequence.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of values in the sequence.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Fail">
      <summary>
            Signals an unconditional assertion failure.
            </summary>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Fail(System.String,System.Object[])">
      <summary>
            Signals an unconditional assertion failure with a particular message.
            </summary>
      <param name="messageFormat">The format of the assertion failure message.</param>
      <param name="messageArgs">The arguments for the assertion failure message format string.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary>
            Verifies that all the elements of the sequence meet the specified condition.
            </summary>
      <param name="values">The sequence of values to evaluate.</param>
      <param name="predicate">The condition that must be fulfilled (returns <c>true</c>) by all the elements of the sequence.</param>
      <typeparam name="T">The type of values in the sequence.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0},System.String,System.Object[])">
      <summary>
            Verifies that all the elements of the sequence meet the specified condition.
            </summary>
      <param name="values">The sequence of values to evaluate.</param>
      <param name="predicate">The condition that must be fulfilled (returns <c>true</c>) by all the elements of the sequence.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of values in the sequence.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.FullMatch(System.String,System.String)">
      <summary>
            Verifies that a string matches regular expression pattern exactly.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="regexPattern">The regular expression pattern.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regexPattern" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.FullMatch(System.String,System.String,System.String,System.Object[])">
      <summary>
            Verifies that a string matches regular expression pattern exactly.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="regexPattern">The regular expression pattern.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regexPattern" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.FullMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
            Verifies that a string matches regular expression pattern exactly.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="regexPattern">The regular expression pattern.</param>
      <param name="regexOptions">The regular expression options.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regexPattern" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.FullMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.Object[])">
      <summary>
            Verifies that a string matches regular expression pattern exactly.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="regexPattern">The regular expression pattern.</param>
      <param name="regexOptions">The regular expression options.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regexPattern" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.FullMatch(System.String,System.Text.RegularExpressions.Regex)">
      <summary>
            Verifies that a string matches regular expression pattern exactly.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="regex">The regular expression.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regex" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.FullMatch(System.String,System.Text.RegularExpressions.Regex,System.String,System.Object[])">
      <summary>
            Verifies that a string matches regular expression pattern exactly.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="regex">The regular expression.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regex" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan``1(``0,``0)">
      <summary>
            Verifies that the left value is greater than the right value according to a particular comparer.
            </summary>
      <param name="left">The expected value.</param>
      <param name="right">The actual value.</param>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan``1(``0,``0,System.Collections.Generic.IComparer{``0})">
      <summary>
            Verifies that the left value is greater than the right value according to a particular comparer.
            </summary>
      <param name="left">The expected value.</param>
      <param name="right">The actual value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan``1(``0,``0,System.Collections.Generic.IComparer{``0},System.String,System.Object[])">
      <summary>
            Verifies that the left value is greater than the right value according to a particular comparer.
            </summary>
      <param name="left">The expected value.</param>
      <param name="right">The actual value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan``1(``0,``0,System.Comparison{``0})">
      <summary>
            Verifies that the left value is greater than the right value according to a particular comparer.
            </summary>
      <param name="left">The expected value.</param>
      <param name="right">The actual value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan``1(``0,``0,System.Comparison{``0},System.String,System.Object[])">
      <summary>
            Verifies that the left value is greater than the right value according to a particular comparer.
            </summary>
      <param name="left">The expected value.</param>
      <param name="right">The actual value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThan``1(``0,``0,System.String,System.Object[])">
      <summary>
            Verifies that the left value is greater than the right value according to a particular comparer.
            </summary>
      <param name="left">The expected value.</param>
      <param name="right">The actual value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThanOrEqualTo``1(``0,``0)">
      <summary>
            Verifies that the left value is greater than or equal to the right value according to a particular comparer.
            </summary>
      <param name="left">The expected value.</param>
      <param name="right">The actual value.</param>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThanOrEqualTo``1(``0,``0,System.Collections.Generic.IComparer{``0})">
      <summary>
            Verifies that the left value is greater than or equal to the right value according to a particular comparer.
            </summary>
      <param name="left">The expected value.</param>
      <param name="right">The actual value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThanOrEqualTo``1(``0,``0,System.Collections.Generic.IComparer{``0},System.String,System.Object[])">
      <summary>
            Verifies that the left value is greater than or equal to the right value according to a particular comparer.
            </summary>
      <param name="left">The expected value.</param>
      <param name="right">The actual value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThanOrEqualTo``1(``0,``0,System.Comparison{``0})">
      <summary>
            Verifies that the left value is greater than or equal to the right value according to a particular comparer.
            </summary>
      <param name="left">The expected value.</param>
      <param name="right">The actual value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThanOrEqualTo``1(``0,``0,System.Comparison{``0},System.String,System.Object[])">
      <summary>
            Verifies that the left value is greater or equal than right value according to a particular comparer.
            </summary>
      <param name="left">The expected value.</param>
      <param name="right">The actual value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.GreaterThanOrEqualTo``1(``0,``0,System.String,System.Object[])">
      <summary>
            Verifies that the left value is greater than or equal to the right value according to a particular comparer.
            </summary>
      <param name="left">The expected value.</param>
      <param name="right">The actual value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Inconclusive">
      <summary>
            Terminates the test and reports an inconclusive test outcome.
            </summary>
      <exception cref="T:Gallio.Framework.TestInconclusiveException">Thrown always.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Inconclusive(System.String,System.Object[])">
      <summary>
            Terminates the test and reports an inconclusive test outcome.
            </summary>
      <param name="messageFormat">The custom message format string, or null if none.</param>
      <param name="messageArgs">The custom message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.TestInconclusiveException">Thrown always.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsAssignableFrom``1(System.Object)">
      <summary>
            Verifies that an object may be assigned to a variable of the specified type.
            </summary>
      <param name="actualValue">The object under examination.</param>
      <typeparam name="TExpected">The Type to compare with the object's Type.</typeparam>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsAssignableFrom``1(System.Object,System.String,System.Object[])">
      <summary>
            Verifies that an object may be assigned to a variable of the specified type.
            </summary>
      <param name="actualValue">The object under examination.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="TExpected">The Type to compare with the object's Type.</typeparam>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object)">
      <summary>
            Verifies that an object may be assigned to a variable of the specified type.
            </summary>
      <param name="expectedType">The Type to compare with the object's Type.</param>
      <param name="actualValue">The object under examination.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedType" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
      <summary>
            Verifies that an object may be assigned to a variable of the specified type.
            </summary>
      <param name="expectedType">The Type to compare with the object's Type.</param>
      <param name="actualValue">The object under examination.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedType" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsEmpty(System.Collections.IEnumerable)">
      <summary>
            Verifies that an actual value contains no elements.
            </summary>
      <param name="actualValue">The actual value.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsEmpty(System.Collections.IEnumerable,System.String,System.Object[])">
      <summary>
            Verifies that an actual value contains no elements.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="P:MbUnit.Framework.Assert.IsFailurePending">
      <summary>
            Returns true if there is a pending unreported assertion failure.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsFalse(System.Boolean)">
      <summary>
            Verifies that an actual value is false.
            </summary>
      <param name="actualValue">The actual value.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsFalse(System.Boolean,System.String,System.Object[])">
      <summary>
            Verifies that an actual value is false.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsInstanceOfType``1(System.Object)">
      <summary>
            Verifies that an actual value is an instance of some expected type.
            </summary>
      <param name="actualValue">The actual value.</param>
      <typeparam name="TExpected">The expected type.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsInstanceOfType``1(System.Object,System.String,System.Object[])">
      <summary>
            Verifies that an actual value is an instance of some expected type.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="TExpected">The expected type.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object)">
      <summary>
            Verifies that an actual value is an instance of some expected type.
            </summary>
      <param name="expectedType">The expected type.</param>
      <param name="actualValue">The actual value.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedType" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsInstanceOfType(System.Type,System.Object,System.String,System.Object[])">
      <summary>
            Verifies that an actual value is an instance of some expected type.
            </summary>
      <param name="expectedType">The expected type.</param>
      <param name="actualValue">The actual value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedType" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotAssignableFrom``1(System.Object)">
      <summary>
            Verifies that an object may not be assigned to a variable of the specified type.
            </summary>
      <param name="actualValue">The object under examination.</param>
      <typeparam name="TUnexpected">The Type to compare with the object's Type.</typeparam>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotAssignableFrom``1(System.Object,System.String,System.Object[])">
      <summary>
            Verifies that an object may not be assigned to a variable of the specified type.
            </summary>
      <param name="actualValue">The object under examination.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="TUnexpected">The Type to compare with the object's Type.</typeparam>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object)">
      <summary>
            Verifies that an object may not be assigned to a variable of the specified type.
            </summary>
      <param name="unexpectedType">The Type to compare with the object's Type.</param>
      <param name="actualValue">The object under examination.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="unexpectedType" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotAssignableFrom(System.Type,System.Object,System.String,System.Object[])">
      <summary>
            Verifies that an object may not be assigned to a variable of the specified type.
            </summary>
      <param name="unexpectedType">The Type to compare with the object's Type.</param>
      <param name="actualValue">The object under examination.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="unexpectedType" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotEmpty(System.Collections.IEnumerable)">
      <summary>
            Verifies that an actual value contains at least one element.
            </summary>
      <param name="actualValue">The actual value.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotEmpty(System.Collections.IEnumerable,System.String,System.Object[])">
      <summary>
            Verifies that an actual value contains at least one element.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotInstanceOfType``1(System.Object)">
      <summary>
            Verifies that an actual value is not an instance of some unexpected type.
            </summary>
      <param name="actualValue">The actual value.</param>
      <typeparam name="TUnexpected">The unexpected type.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotInstanceOfType``1(System.Object,System.String,System.Object[])">
      <summary>
            Verifies that an actual value is not an instance of some unexpected type.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="TUnexpected">The unexpected type.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object)">
      <summary>
            Verifies that an actual value is not an instance of some unexpected type.
            </summary>
      <param name="unexpectedType">The unexpected type.</param>
      <param name="actualValue">The actual value.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="unexpectedType" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotInstanceOfType(System.Type,System.Object,System.String,System.Object[])">
      <summary>
            Verifies that an actual value is not an instance of some unexpected type.
            </summary>
      <param name="unexpectedType">The unexpected type.</param>
      <param name="actualValue">The actual value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="unexpectedType" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotNull(System.Object)">
      <summary>
            Verifies that an actual value is not null.
            </summary>
      <param name="actualValue">The actual value.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNotNull(System.Object,System.String,System.Object[])">
      <summary>
            Verifies that an actual value is not null.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNull(System.Object)">
      <summary>
            Verifies that an actual value is null.
            </summary>
      <param name="actualValue">The actual value.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsNull(System.Object,System.String,System.Object[])">
      <summary>
            Verifies that an actual value is null.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsSerializableType(System.Type)">
      <summary>
            Verifies that a type supports the runtime serialization protocol.
            </summary>
      <param name="type">The type to verify.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsSerializableType(System.Type,System.String,System.Object[])">
      <summary>
            Verifies that a type supports the runtime serialization protocol.
            </summary>
      <param name="type">The type to verify.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsTrue(System.Boolean)">
      <summary>
            Verifies that an actual value is true.
            </summary>
      <param name="actualValue">The actual value.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsTrue(System.Boolean,System.String,System.Object[])">
      <summary>
            Verifies that an actual value is true.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsXmlSerializableType(System.Type)">
      <summary>
            Verifies that a type supports the Xml serialization protocol used by <see cref="T:System.Xml.Serialization.XmlSerializer" />.
            </summary>
      <param name="type">The type to verify.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.IsXmlSerializableType(System.Type,System.String,System.Object[])">
      <summary>
            Verifies that a type supports the Xml serialization protocol used by <see cref="T:System.Xml.Serialization.XmlSerializer" />.
            </summary>
      <param name="type">The type to verify.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThan``1(``0,``0)">
      <summary>
            Verifies that the left value is less than the right value according to a particular comparer.
            </summary>
      <param name="left">The expected value.</param>
      <param name="right">The actual value.</param>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThan``1(``0,``0,System.Collections.Generic.IComparer{``0})">
      <summary>
            Verifies that the left value is less than the right value according to a particular comparer.
            </summary>
      <param name="left">The expected value.</param>
      <param name="right">The actual value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThan``1(``0,``0,System.Collections.Generic.IComparer{``0},System.String,System.Object[])">
      <summary>
            Verifies that the left value is less than the right value according to a particular comparer.
            </summary>
      <param name="left">The expected value.</param>
      <param name="right">The actual value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThan``1(``0,``0,System.Comparison{``0})">
      <summary>
            Verifies that the left value is less than the right value according to a particular comparer.
            </summary>
      <param name="left">The expected value.</param>
      <param name="right">The actual value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThan``1(``0,``0,System.Comparison{``0},System.String,System.Object[])">
      <summary>
            Verifies that the left value is less than the right value according to a particular comparer.
            </summary>
      <param name="left">The expected value.</param>
      <param name="right">The actual value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThan``1(``0,``0,System.String,System.Object[])">
      <summary>
            Verifies that the left value is less than the right value according to a particular comparer.
            </summary>
      <param name="left">The expected value.</param>
      <param name="right">The actual value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThanOrEqualTo``1(``0,``0)">
      <summary>
            Verifies that the left value is less than or equal to the right value according to a particular comparer.
            </summary>
      <param name="left">The expected value.</param>
      <param name="right">The actual value.</param>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThanOrEqualTo``1(``0,``0,System.Collections.Generic.IComparer{``0})">
      <summary>
            Verifies that the left value is less than or equal to the right value according to a particular comparer.
            </summary>
      <param name="left">The expected value.</param>
      <param name="right">The actual value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThanOrEqualTo``1(``0,``0,System.Collections.Generic.IComparer{``0},System.String,System.Object[])">
      <summary>
            Verifies that the left value is less than or equal to the right value according to a particular comparer.
            </summary>
      <param name="left">The expected value.</param>
      <param name="right">The actual value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThanOrEqualTo``1(``0,``0,System.Comparison{``0})">
      <summary>
            Verifies that the left value is less than or equal to the right value according to a particular comparer.
            </summary>
      <param name="left">The expected value.</param>
      <param name="right">The actual value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThanOrEqualTo``1(``0,``0,System.Comparison{``0},System.String,System.Object[])">
      <summary>
            Verifies that the left value is less than or equal to the right value according to a particular comparer.
            </summary>
      <param name="left">The expected value.</param>
      <param name="right">The actual value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.LessThanOrEqualTo``1(``0,``0,System.String,System.Object[])">
      <summary>
            Verifies that the left value is less than or equal to the right value according to a particular comparer.
            </summary>
      <param name="left">The expected value.</param>
      <param name="right">The actual value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Like(System.String,System.String)">
      <summary>
            Verifies that a string contains a full or partial match of a regular expression pattern.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="regexPattern">The regular expression pattern.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regexPattern" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Like(System.String,System.String,System.String,System.Object[])">
      <summary>
            Verifies that a string contains a full or partial match of a regular expression pattern.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="regexPattern">The regular expression pattern.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regexPattern" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Like(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
            Verifies that a string contains a full or partial match of a regular expression pattern.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="regexPattern">The regular expression pattern.</param>
      <param name="regexOptions">The regular expression options.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regexPattern" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Like(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.Object[])">
      <summary>
            Verifies that a string contains a full or partial match of a regular expression pattern.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="regexPattern">The regular expression pattern.</param>
      <param name="regexOptions">The regular expression options.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regexPattern" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Like(System.String,System.Text.RegularExpressions.Regex)">
      <summary>
            Verifies that a string contains a full or partial match of a regular expression pattern.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="regex">The regular expression.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regex" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Like(System.String,System.Text.RegularExpressions.Regex,System.String,System.Object[])">
      <summary>
            Verifies that a string contains a full or partial match of a regular expression pattern.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="regex">The regular expression.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regex" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Multiple(Gallio.Common.Action)">
      <summary>
            Evaluates a block of code that contains multiple related assertions.
            </summary>
      <param name="action">The action to invoke.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Multiple(Gallio.Common.Action,System.String,System.Object[])">
      <summary>
            Evaluates a block of code that contains multiple related assertions.
            </summary>
      <param name="action">The action to invoke.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween``1(``0,``0,``0)">
      <summary>
            Verifies that a test value is not between left and right values according to a particular comparer.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="minimum">Inclusive minimum value.</param>
      <param name="maximum">Inclusive maximum value.</param>
      <typeparam name="T">The type of value.</typeparam>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
      <summary>
            Verifies that a test value is not between left and right values according to a particular comparer.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="minimum">Inclusive minimum value.</param>
      <param name="maximum">Inclusive maximum value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween``1(``0,``0,``0,System.Collections.Generic.IComparer{``0},System.String,System.Object[])">
      <summary>
            Verifies that a test value is not between left and right values according to a particular comparer.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="minimum">Inclusive minimum value.</param>
      <param name="maximum">Inclusive maximum value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween``1(``0,``0,``0,System.Comparison{``0})">
      <summary>
            Verifies that a test value is not between left and right values according to a particular comparer.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="minimum">Inclusive minimum value.</param>
      <param name="maximum">Inclusive maximum value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween``1(``0,``0,``0,System.Comparison{``0},System.String,System.Object[])">
      <summary>
            Verifies that a test value is not between left and right values according to a particular comparer.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="minimum">Inclusive minimum value.</param>
      <param name="maximum">Inclusive maximum value.</param>
      <param name="comparer">The comparer to use, or null to use the default one.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotBetween``1(``0,``0,``0,System.String,System.Object[])">
      <summary>
            Verifies that a test value is not between left and right values according to a particular comparer.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="minimum">Inclusive minimum value.</param>
      <param name="maximum">Inclusive maximum value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotLike(System.String,System.String)">
      <summary>
            Verifies that a string does not contain a full or partial match of a regular expression pattern.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="regexPattern">The regular expression pattern.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regexPattern" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotLike(System.String,System.String,System.String,System.Object[])">
      <summary>
            Verifies that a string does not contain a full or partial match of a regular expression pattern.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="regexPattern">The regular expression pattern.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regexPattern" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotLike(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
      <summary>
            Verifies that a string does not contain a full or partial match of a regular expression pattern.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="regexPattern">The regular expression pattern.</param>
      <param name="regexOptions">The regular expression options.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regexPattern" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotLike(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.Object[])">
      <summary>
            Verifies that a string does not contain a full or partial match of a regular expression pattern.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="regexPattern">The regular expression pattern.</param>
      <param name="regexOptions">The regular expression options.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regexPattern" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotLike(System.String,System.Text.RegularExpressions.Regex)">
      <summary>
            Verifies that a string does not contain a full or partial match of a regular expression pattern.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="regex">The regular expression.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regex" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.NotLike(System.String,System.Text.RegularExpressions.Regex,System.String,System.Object[])">
      <summary>
            Verifies that a string does not contain a full or partial match of a regular expression pattern.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="regex">The regular expression.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="regex" /> is null.</exception>
    </member>
    <member name="P:MbUnit.Framework.Assert.Over">
      <summary>
            Provides methods for composing assertions to map over complex data structures.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.ReferenceEquals(System.Object,System.Object)">
      <summary>
            Always throws an <see cref="T:System.InvalidOperationException" />.
            Use <see cref="M:MbUnit.Framework.Assert.AreSame``1(``0,``0)" /> instead.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.Assert.Serialize(System.Object,System.Runtime.Serialization.IFormatter)">
      <summary>
            Verifies that an object can be serialized to a stream using the specified <see cref="T:System.Runtime.Serialization.IFormatter" />
            and returns the resulting stream.
            </summary>
      <param name="value">The value.</param>
      <param name="formatter">The object serialization formatter.</param>
      <returns>The serialized stream.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="formatter" /> is null.</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Serialize(System.Object,System.Runtime.Serialization.IFormatter,System.String,System.Object[])">
      <summary>
            Verifies that an object can be serialized to a stream using the specified <see cref="T:System.Runtime.Serialization.IFormatter" />
            and returns the resulting stream.
            </summary>
      <param name="value">The value.</param>
      <param name="formatter">The object serialization formatter.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <returns>The serialized stream.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="formatter" /> is null.</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.SerializeThenDeserialize``1(``0,System.Runtime.Serialization.IFormatter)">
      <summary>
            Verifies that an object can be serialized then deserialized to and from a stream using the
            specified <see cref="T:System.Runtime.Serialization.IFormatter" /> and returns the resulting deserialized object.
            </summary>
      <param name="value">The value.</param>
      <param name="formatter">The object serialization formatter.</param>
      <returns>The serialized then deserialized object.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="formatter" /> is null.</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.SerializeThenDeserialize``1(``0,System.Runtime.Serialization.IFormatter,System.String,System.Object[])">
      <summary>
            Verifies that an object can be serialized and deserialized to and from a stream using the
            specified <see cref="T:System.Runtime.Serialization.IFormatter" /> and returns the resulting deserialized object.
            </summary>
      <param name="value">The value.</param>
      <param name="formatter">The object serialization formatter.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <returns>The serialized then deserialized object.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="formatter" /> is null.</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Sorted``1(System.Collections.Generic.IEnumerable{``0},MbUnit.Framework.SortOrder)">
      <summary>
            Verifies that the sequence of values are sorted in the specified order.
            </summary>
      <param name="values">The sequence of values to be tested.</param>
      <param name="sortOrder">The expected sort order.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Sorted``1(System.Collections.Generic.IEnumerable{``0},MbUnit.Framework.SortOrder,System.Collections.Generic.IComparer{``0})">
      <summary>
            Verifies that the sequence of values are sorted in the specified order.
            </summary>
      <param name="values">The sequence of values to be tested.</param>
      <param name="sortOrder">The expected sort order.</param>
      <param name="comparer">A comparer instance to be used to compare two elements of the sequence, or null to use a default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Sorted``1(System.Collections.Generic.IEnumerable{``0},MbUnit.Framework.SortOrder,System.Collections.Generic.IComparer{``0},System.String,System.Object[])">
      <summary>
            Verifies that the sequence of values are sorted in the specified order.
            </summary>
      <param name="values">The sequence of values to be tested.</param>
      <param name="sortOrder">The expected sort order.</param>
      <param name="comparer">A comparer instance to be used to compare two elements of the sequence, or null to use a default one.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Sorted``1(System.Collections.Generic.IEnumerable{``0},MbUnit.Framework.SortOrder,System.Comparison{``0})">
      <summary>
            Verifies that the sequence of values are sorted in the specified order.
            </summary>
      <param name="values">The sequence of values to be tested.</param>
      <param name="sortOrder">The expected sort order.</param>
      <param name="compare">A comparison function to be used to compare two elements of the sequence, or null to use a default one.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Sorted``1(System.Collections.Generic.IEnumerable{``0},MbUnit.Framework.SortOrder,System.Comparison{``0},System.String,System.Object[])">
      <summary>
            Verifies that the sequence of values are sorted in the specified order.
            </summary>
      <param name="values">The sequence of values to be tested.</param>
      <param name="sortOrder">The expected sort order.</param>
      <param name="comparer">A comparison function to be used to compare two elements of the sequence, or null to use a default one.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Sorted``1(System.Collections.Generic.IEnumerable{``0},MbUnit.Framework.SortOrder,System.String,System.Object[])">
      <summary>
            Verifies that the sequence of values are sorted in the specified order.
            </summary>
      <param name="values">The sequence of values to be tested.</param>
      <param name="sortOrder">The expected sort order.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="T">The type of value.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.StartsWith(System.String,System.String)">
      <summary>
            Verifies that a string starts with the specified text.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="expectedText">The expected pattern.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedText" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.StartsWith(System.String,System.String,System.String,System.Object[])">
      <summary>
            Verifies that a string starts with the specified text.
            </summary>
      <param name="actualValue">The actual value.</param>
      <param name="expectedText">The expected pattern.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedText" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Terminate(Gallio.Model.TestOutcome)">
      <summary>
            Terminates the test and reports a specific test outcome.
            </summary>
      <param name="outcome">The desired test outcome.</param>
      <exception cref="T:Gallio.Framework.TestTerminatedException">Thrown always.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Terminate(Gallio.Model.TestOutcome,System.String,System.Object[])">
      <summary>
            Terminates the test and reports a specific test outcome.
            </summary>
      <param name="outcome">The desired test outcome.</param>
      <param name="messageFormat">The custom message format string, or null if none.</param>
      <param name="messageArgs">The custom message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.TestTerminatedException">Thrown always.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.TerminateSilently(Gallio.Model.TestOutcome)">
      <summary>
            Terminates the test silently and reports a specific test outcome.
            </summary>
      <param name="outcome">The desired test outcome.</param>
      <exception cref="T:Gallio.Framework.SilentTestException">Thrown always.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.TerminateSilently(Gallio.Model.TestOutcome,System.String,System.Object[])">
      <summary>
            Terminates the test silently and reports a specific test outcome.
            </summary>
      <param name="outcome">The desired test outcome.</param>
      <param name="messageFormat">The custom message format string, or null if none.</param>
      <param name="messageArgs">The custom message arguments, or null if none.</param>
      <exception cref="T:Gallio.Framework.SilentTestException">Thrown always.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Throws``1(Gallio.Common.Action)">
      <summary>
            Verifies that a block of code throws an exception of a particular type.
            </summary>
      <param name="action">The action delegate to evaluate.</param>
      <typeparam name="TExpectedException">The expected type of exception.</typeparam>
      <returns>The exception that was thrown.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action" /> is null.</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Throws``2(Gallio.Common.Action)">
      <summary>
            Verifies that a block of code throws an exception of a particular type; and that 
            the exception has an inner exception of a particular type.
            </summary>
      <param name="action">The action delegate to evaluate.</param>
      <typeparam name="TExpectedException">The expected type of exception.</typeparam>
      <typeparam name="TExpectedInnerException">The expected type of the inner exception.</typeparam>
      <returns>The exception that was thrown.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action" /> is null.</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Throws``1(Gallio.Common.Action,System.String,System.Object[])">
      <summary>
            Verifies that a block of code throws an exception of a particular type.
            </summary>
      <param name="action">The action delegate to evaluate.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="TExpectedException">The expected type of exception.</typeparam>
      <returns>The exception that was thrown.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action" /> is null.</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Throws``2(Gallio.Common.Action,System.String,System.Object[])">
      <summary>
            Verifies that a block of code throws an exception of a particular type; and that 
            the exception has an inner exception of a particular type.
            </summary>
      <param name="action">The action delegate to evaluate.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="TExpectedException">The expected type of the exception.</typeparam>
      <typeparam name="TExpectedInnerException">The expected type of the inner exception.</typeparam>
      <returns>The exception that was thrown.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action" /> is null.</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Throws(System.Type,Gallio.Common.Action)">
      <summary>
            Verifies that a block of code throws an exception of a particular type.
            </summary>
      <param name="expectedExceptionType">The expected exception type.</param>
      <param name="action">The action delegate to evaluate.</param>
      <returns>The exception that was thrown.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedExceptionType" />
            or <paramref name="action" /> is null.</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Throws(System.Type,Gallio.Common.Action,System.String,System.Object[])">
      <summary>
            Verifies that a block of code throws an exception of a particular type.
            </summary>
      <param name="expectedExceptionType">The expected exception type.</param>
      <param name="action">The action delegate to evaluate.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <returns>The exception that was thrown.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedExceptionType" />
            or <paramref name="action" /> is null.</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Throws(System.Type,System.Type,Gallio.Common.Action)">
      <summary>
            Verifies that a block of code throws an exception of a particular type; and that 
            the exception has an inner exception of a particular type.
            </summary>
      <param name="expectedExceptionType">The expected exception type.</param>
      <param name="expectedInnerExceptionType">The expected inner exception type, or null to ignore the inner exception.</param>
      <param name="action">The action delegate to evaluate.</param>
      <returns>The exception that was thrown.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedExceptionType" />
            or <paramref name="action" /> is null.</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.Throws(System.Type,System.Type,Gallio.Common.Action,System.String,System.Object[])">
      <summary>
            Verifies that a block of code throws an exception of a particular type; and that 
            the exception has an inner exception of a particular type.
            </summary>
      <param name="expectedExceptionType">The expected exception type.</param>
      <param name="expectedInnerExceptionType">The expected inner exception type, or null to ignore the inner exception.</param>
      <param name="action">The action delegate to evaluate.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <returns>The exception that was thrown.</returns>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="expectedExceptionType" />
            or <paramref name="action" /> is null.</exception>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.XmlDeserialize``1(System.String)">
      <summary>
            Verifies that an object can be deserialized from Xml using
            an <see cref="T:System.Xml.Serialization.XmlSerializer" /> and returns the resulting deserialized object.
            </summary>
      <param name="xml">The Xml.</param>
      <returns>The deserialized object.</returns>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.XmlDeserialize``1(System.String,System.String,System.Object[])">
      <summary>
            Verifies that an object can be deserialized from Xml using
            an <see cref="T:System.Xml.Serialization.XmlSerializer" /> and returns the resulting deserialized object.
            </summary>
      <param name="xml">The Xml.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <returns>The deserialized object.</returns>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.XmlSerialize(System.Object)">
      <summary>
            Verifies that an object can be serialized to Xml using an
            <see cref="T:System.Xml.Serialization.XmlSerializer" /> and returns the resulting Xml as a string.
            </summary>
      <param name="value">The value.</param>
      <returns>The serialized Xml.</returns>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.XmlSerialize(System.Object,System.String,System.Object[])">
      <summary>
            Verifies that an object can be serialized to Xml using
            an <see cref="T:System.Xml.Serialization.XmlSerializer" /> and returns the resulting Xml as a string.
            </summary>
      <param name="value">The value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <returns>The serialized Xml.</returns>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.XmlSerializeThenDeserialize``1(``0)">
      <summary>
            Verifies that an object can be serialized then deserialized to and from Xml using
            an <see cref="T:System.Xml.Serialization.XmlSerializer" /> and returns the resulting deserialized object.
            </summary>
      <param name="value">The value.</param>
      <returns>The serialized then deserialized object.</returns>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.Assert.XmlSerializeThenDeserialize``1(``0,System.String,System.Object[])">
      <summary>
            Verifies that an object can be serialized then deserialized to and from Xml using
            an <see cref="T:System.Xml.Serialization.XmlSerializer" /> and returns the resulting deserialized object.
            </summary>
      <param name="value">The value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <returns>The serialized then deserialized object.</returns>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="T:MbUnit.Framework.AssertOverSyntax">
      <summary>
            Defines methods used with the <see cref="P:MbUnit.Framework.Assert.Over" /> syntax for mapping
            assertions over complex data structures.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.AssertOverSyntax.KeyedPairs``3(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``2},Gallio.Common.Action{``1,``2})">
      <summary>
            Evaluates an assertion over key/value pairs with identical keys drawn from two dictionaries.
            </summary>
      <param name="leftDictionary">The left dictionary, or null.</param>
      <param name="rightDictionary">The right dictionary, or null.</param>
      <param name="assertion">The assertion to evaluate over all pairs, with the left value as first
            argument, and right value as second.</param>
      <typeparam name="TKey">The key type.</typeparam>
      <typeparam name="TLeftValue">The expected value type.</typeparam>
      <typeparam name="TRightValue">The expected value type.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.AssertOverSyntax.KeyedPairs``3(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``2},Gallio.Common.Action{``1,``2},System.String,System.Object[])">
      <summary>
            Evaluates an assertion over key/value pairs with identical keys drawn from two dictionaries.
            </summary>
      <param name="leftDictionary">The left dictionary, or null.</param>
      <param name="rightDictionary">The right dictionary, or null.</param>
      <param name="assertion">The assertion to evaluate over all pairs, with the left value as first
            argument, and right value as second.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="TKey">The key type.</typeparam>
      <typeparam name="TLeftValue">The expected value type.</typeparam>
      <typeparam name="TRightValue">The expected value type.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.AssertOverSyntax.KeyedPairs``3(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``2},Gallio.Common.Action{``0,``1,``2})">
      <summary>
            Evaluates an assertion over key/value pairs with identical keys drawn from two dictionaries.
            </summary>
      <param name="leftDictionary">The left dictionary, or null.</param>
      <param name="rightDictionary">The right dictionary, or null.</param>
      <param name="assertion">The assertion to evaluate over all pairs, with the key as first
            argument, left value as second, and right value as third.</param>
      <typeparam name="TKey">The key type.</typeparam>
      <typeparam name="TLeftValue">The expected value type.</typeparam>
      <typeparam name="TRightValue">The expected value type.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.AssertOverSyntax.KeyedPairs``3(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IDictionary{``0,``2},Gallio.Common.Action{``0,``1,``2},System.String,System.Object[])">
      <summary>
            Evaluates an assertion over key/value pairs with identical keys drawn from two dictionaries.
            </summary>
      <param name="leftDictionary">The left dictionary, or null.</param>
      <param name="rightDictionary">The right dictionary, or null.</param>
      <param name="assertion">The assertion to evaluate over all pairs, with the key as first
            argument, left value as second, and right value as third.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="TKey">The key type.</typeparam>
      <typeparam name="TLeftValue">The expected value type.</typeparam>
      <typeparam name="TRightValue">The expected value type.</typeparam>
      <exception cref="T:Gallio.Framework.Assertions.AssertionException">Thrown if the verification failed unless the current <see cref="P:Gallio.Framework.Assertions.AssertionContext.AssertionFailureBehavior" /> indicates otherwise.</exception>
    </member>
    <member name="M:MbUnit.Framework.AssertOverSyntax.Pairs``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Gallio.Common.Action{``0,``1})">
      <summary>
            Evaluates an assertion over pairs of values taken from two sequences.
            </summary>
      <param name="leftSequence">The left sequence, or null.</param>
      <param name="rightSequence">The right sequence, or null.</param>
      <param name="assertion">The assertion to evaluate given a left value and a right value.</param>
      <typeparam name="TLeftValue">The left value type.</typeparam>
      <typeparam name="TRightValue">The right value type.</typeparam>
    </member>
    <member name="M:MbUnit.Framework.AssertOverSyntax.Pairs``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},Gallio.Common.Action{``0,``1},System.String,System.Object[])">
      <summary>
            Evaluates an assertion over pairs of values taken from two sequence.
            </summary>
      <param name="leftSequence">The left sequence, or null.</param>
      <param name="rightSequence">The right sequence, or null.</param>
      <param name="assertion">The assertion to evaluate given a left value and a right value.</param>
      <param name="messageFormat">The custom assertion message format, or null if none.</param>
      <param name="messageArgs">The custom assertion message arguments, or null if none.</param>
      <typeparam name="TLeftValue">The left value type.</typeparam>
      <typeparam name="TRightValue">The right value type.</typeparam>
    </member>
    <member name="T:MbUnit.Framework.AuthorAttribute">
      <summary>
            Associates the author's name and email address with a test fixture, test method,
            test parameter or other test component.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.AuthorAttribute.#ctor(System.String)">
      <summary>
            Associates the author's name with the test component annotated
            by this attribute.
            </summary>
      <param name="authorName">The author's name.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="authorName" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.AuthorAttribute.#ctor(System.String,System.String)">
      <summary>
            Associates the author's name and email address with the test component annotated
            by this attribute.
            </summary>
      <param name="authorName">The author's name.</param>
      <param name="authorEmail">The author's email address.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="authorName" /> or <paramref name="authorEmail " /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.AuthorAttribute.#ctor(System.String,System.String,System.String)">
      <summary>
            Associates the author's name, email address and homepage with the test component annotated
            by this attribute.
            </summary>
      <param name="authorName">The author's name.</param>
      <param name="authorEmail">The author's email address.</param>
      <param name="authorHomepage">The author's home page.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="authorName" />,
            <paramref name="authorEmail " /> or <paramref name="authorHomepage" /> is null.</exception>
    </member>
    <member name="P:MbUnit.Framework.AuthorAttribute.AuthorEmail">
      <summary>
            Gets or sets the author's email address or an empty string if none.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.AuthorAttribute.AuthorHomepage">
      <summary>
            Gets or sets the author's homepage or an empty string if none.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.AuthorAttribute.AuthorName">
      <summary>
            Gets or sets the author's name.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.AuthorAttribute.GetMetadata">
      <summary>
            Gets the metadata key / value pairs to be added to the test component.
            </summary>
      <returns>The metadata entries.</returns>
    </member>
    <member name="T:MbUnit.Framework.BindAttribute">
      <summary>
            The bind attribute overrides the default binding rules for a test parameter
            by specifying a different data source, a binding path or an index.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.BindAttribute.#ctor(System.Int32)">
      <summary>
            Sets the binding index for the associated test parameter.
            </summary>
      <param name="index">The binding index.</param>
    </member>
    <member name="M:MbUnit.Framework.BindAttribute.#ctor(System.String)">
      <summary>
            Sets the binding path for the associated test parameter.
            </summary>
      <param name="path">The binding path.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="path" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.BindAttribute.DecorateTestParameter(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ISlotInfo)">
      <summary>
            Applies decorations to a <see cref="T:Gallio.Framework.Pattern.PatternTestParameter" />.
            </summary>
      <param name="slotScope">The slot scope.</param>
      <param name="slot">The slot.</param>
    </member>
    <member name="P:MbUnit.Framework.BindAttribute.Index">
      <summary>
            Gets the binding index, or null if none.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.BindAttribute.Path">
      <summary>
            Gets the binding path, or null if none.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.BindAttribute.Source">
      <summary>
            Gets or sets the name of the data source to bind, or null to bind
            the default data source for the test parameter.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.CategoryAttribute">
      <summary>
            Associates a category name with a test fixture, test method, test parameter
            or other test component.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.CategoryAttribute.#ctor(System.String)">
      <summary>
            Associates a category with the test component annotated by this attribute.
            </summary>
      <param name="category">The name of the category to associate.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="category" /> is null.</exception>
    </member>
    <member name="P:MbUnit.Framework.CategoryAttribute.Category">
      <summary>
            Gets the name of the category.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.CategoryAttribute.GetMetadata">
      <summary>
            Gets the metadata key / value pairs to be added to the test component.
            </summary>
      <returns>The metadata entries.</returns>
    </member>
    <member name="T:MbUnit.Framework.ColumnAttribute">
      <summary>
            Provides a column of literal values as a data source.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ColumnAttribute.#ctor(System.Object[])">
      <summary>
            Adds a column of literal values.
            </summary>
      <param name="values">The array of values in the column.</param>
    </member>
    <member name="M:MbUnit.Framework.ColumnAttribute.PopulateDataSource(Gallio.Framework.Pattern.IPatternScope,Gallio.Framework.Data.DataSource,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Populates the data source with the contributions of this attribute.
            </summary>
      <param name="scope">The scope.</param>
      <param name="dataSource">The data source.</param>
      <param name="codeElement">The code element.</param>
    </member>
    <member name="P:MbUnit.Framework.ColumnAttribute.Values">
      <summary>
            Gets the array of values in the column.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.CombinatorialJoinAttribute">
      <summary>
            Sets the join strategy of a test to be combinatorial.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.CombinatorialJoinAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.CombinatorialJoinAttribute" /> class</summary>
    </member>
    <member name="M:MbUnit.Framework.CombinatorialJoinAttribute.GetJoinStrategy">
      <summary>
            Gets the join strategy to use.
            </summary>
      <returns>The join strategy.</returns>
    </member>
    <member name="T:MbUnit.Framework.ContentAttribute">
      <summary>
            An abstract base class for data source attributes that obtain contents from
            a local file, manifest resource, or inline data.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContentAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.ContentAttribute" /> class</summary>
    </member>
    <member name="P:MbUnit.Framework.ContentAttribute.Contents">
      <summary>
            Gets or sets the inline data contents as a string.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.ContentAttribute.FilePath">
      <summary>
            Gets or sets the path of a local file relative to the current working
            directory from which the file contents should be read.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContentAttribute.GetDataLocationName">
      <summary>
            Gets the name of the location that is providing the data, or null if none.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.ContentAttribute.IsDynamic">
      <summary>
            Returns true if the contents are dynamic, or false if they are static.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContentAttribute.OpenStream(Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Opens the contents as a stream.
            </summary>
      <param name="codeElement">The code element to which the attribute was applied.</param>
      <returns>The stream.</returns>
    </member>
    <member name="M:MbUnit.Framework.ContentAttribute.OpenTextReader(Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Opens the contents as a text reader.
            </summary>
      <param name="codeElement">The code element to which the attribute was applied.</param>
      <returns>The text reader.</returns>
    </member>
    <member name="P:MbUnit.Framework.ContentAttribute.ResourcePath">
      <summary>
            Gets or sets the path of a manifest resource from which the contents should be read.  
            </summary>
    </member>
    <member name="P:MbUnit.Framework.ContentAttribute.ResourceScope">
      <summary>
            Gets or sets a <see cref="T:System.Type" /> that is used to locate the assembly and
            namespace within which to resolve a manifest resource in combination
            with the <see cref="P:MbUnit.Framework.ContentAttribute.ResourcePath" /> property.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContentAttribute.Validate(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Verifies that the attribute is being used correctly.
            </summary>
      <param name="scope">The scope.</param>
      <param name="codeElement">The code element.</param>
      <exception cref="T:Gallio.Framework.Pattern.PatternUsageErrorException">Thrown if the attribute is being used incorrectly.</exception>
    </member>
    <member name="M:MbUnit.Framework.ContentAttribute.ValidateSource(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Validates the data source properties of the content attribute.
            </summary>
      <param name="scope">The pattern scope.</param>
      <param name="codeElement">The code element to which the attribute was applied.</param>
      <exception cref="T:Gallio.Framework.Pattern.PatternUsageErrorException">Thrown if none of the source properties, such as <see cref="P:MbUnit.Framework.ContentAttribute.Contents" />, 
            <see cref="P:MbUnit.Framework.ContentAttribute.FilePath" /> or <see cref="P:MbUnit.Framework.ContentAttribute.ResourcePath" /> have been set.</exception>
    </member>
    <member name="T:MbUnit.Framework.CsvDataAttribute">
      <summary>
            Provides data from Comma Separated Values (CSV) contents.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.CsvDataAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.CsvDataAttribute" /> class</summary>
    </member>
    <member name="P:MbUnit.Framework.CsvDataAttribute.CommentPrefix">
      <summary>
            Gets or sets a character that indicates that a line in the source represents a comment.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.CsvDataAttribute.FieldDelimiter">
      <summary>
            Gets or sets the field delimiter character.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.CsvDataAttribute.HasHeader">
      <summary>
            Gets or sets whether the CSV document has a header that should be used to provide
            aliases for indexed columns.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.CsvDataAttribute.PopulateDataSource(Gallio.Framework.Pattern.IPatternScope,Gallio.Framework.Data.DataSource,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Populates the data source with the contributions of this attribute.
            </summary>
      <param name="scope">The scope.</param>
      <param name="dataSource">The data source.</param>
      <param name="codeElement">The code element.</param>
    </member>
    <member name="T:MbUnit.Framework.DataAttribute">
      <summary>
            An abstract base class for MbUnit attributes that contribute values to data sources
            along with metadata such a description or expected exception type.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.DataAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.DataAttribute" /> class</summary>
    </member>
    <member name="P:MbUnit.Framework.DataAttribute.Description">
      <summary>
            Gets or sets a description of the values provided by the data source.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.DataAttribute.ExpectedException">
      <summary>
            Gets or sets the type of exception that should be thrown when the
            values provided by the data source are consumed by test.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.DataAttribute.ExpectedExceptionMessage">
      <summary>
            Gets or sets the message of the exception that should be thrown when the
            values provided by the data source are consumed by test.
            May be a substring of the actual exception message.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.DataAttribute.GetMetadata">
      <summary>
            Gets the metadata for the data source.
            </summary>
      <returns>The metadata keys and values.</returns>
    </member>
    <member name="T:MbUnit.Framework.DefaultTestCaseTimeoutAttribute">
      <summary>
            Specifies the default test case timeout for all tests in the test assembly.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.DefaultTestCaseTimeoutAttribute.#ctor(System.Int32)">
      <summary>
            Sets the default timeout in seconds, or zero if none.
            </summary>
      <param name="timeoutSeconds">The timeout in seconds, or zero if none.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="timeoutSeconds" /> is less than 0.</exception>
    </member>
    <member name="M:MbUnit.Framework.DefaultTestCaseTimeoutAttribute.DecorateAssemblyTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.IAssemblyInfo)">
      <summary>
            Applies decorations to an assembly-level test.
            </summary>
      <param name="assemblyScope">The assembly scope.</param>
      <param name="assembly">The assembly.</param>
    </member>
    <member name="P:MbUnit.Framework.DefaultTestCaseTimeoutAttribute.Timeout">
      <summary>
            Gets the timeout, or null if none.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.DefaultTestCaseTimeoutAttribute.TimeoutSeconds">
      <summary>
            Gets the default timeout in seconds, or zero if none.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.DegreeOfParallelismAttribute">
      <summary>
            Specifies the maximum number of concurrent threads to use when tests are run in parallel
            for all tests in the test assembly.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.DegreeOfParallelismAttribute.#ctor(System.Int32)">
      <summary>
            Specifies the maximum number of concurrent threads to use when tests are run in parallel.
            </summary>
      <param name="degreeOfParallelism">The degree of parallelism.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="degreeOfParallelism" /> is less than 1.</exception>
    </member>
    <member name="M:MbUnit.Framework.DegreeOfParallelismAttribute.DecorateAssemblyTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.IAssemblyInfo)">
      <summary>
            Applies decorations to an assembly-level test.
            </summary>
      <param name="assemblyScope">The assembly scope.</param>
      <param name="assembly">The assembly.</param>
    </member>
    <member name="P:MbUnit.Framework.DegreeOfParallelismAttribute.DegreeOfParallelism">
      <summary>
            Gets the degree of parallelism.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.DependsOnAttribute">
      <summary>
            Creates a dependency from this test assembly, test fixture or test method on some other test
            fixture or test method.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.DependsOnAttribute.#ctor(System.String)">
      <summary>
            Creates a dependency from this test on another test method within this test fixture.
            </summary>
      <param name="testMethodName">The dependent test method name.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="testMethodName" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.DependsOnAttribute.#ctor(System.Type)">
      <summary>
            Creates a dependency from this test on another test fixture.
            </summary>
      <param name="testFixtureType">The dependent test fixture type.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="testFixtureType" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.DependsOnAttribute.#ctor(System.Type,System.String)">
      <summary>
            Creates a dependency from this test on a particular test method within another test fixture.
            </summary>
      <param name="testFixtureType">The dependent test fixture type.</param>
      <param name="testMethodName">The dependent test method name.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="testFixtureType" /> or <paramref name="testMethodName" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.DependsOnAttribute.GetDependency(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Gets the code element that declares the tests on which this test should depend.
            </summary>
      <param name="scope">The scope.</param>
      <param name="codeElement">The code element.</param>
      <returns>The code element representing the dependency.</returns>
    </member>
    <member name="P:MbUnit.Framework.DependsOnAttribute.TestFixtureType">
      <summary>
            Gets the dependent test fixture type, or null if the dependency is on another
            test method of this test fixture.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.DependsOnAttribute.TestMethodName">
      <summary>
            Gets the dependent test method name, or null if the dependency
            is on the whole test fixture.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.DescriptionAttribute">
      <summary>
            Associates a description with a test fixture, test method, test parameter
            or other test component.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.DescriptionAttribute.#ctor(System.String)">
      <summary>
            Associates a description with the test component annotated by this attribute.
            </summary>
      <param name="description">The description to associate.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="description" /> is null.</exception>
    </member>
    <member name="P:MbUnit.Framework.DescriptionAttribute.Description">
      <summary>
            Gets or sets the description.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.DescriptionAttribute.GetMetadata">
      <summary>
            Gets the metadata key / value pairs to be added to the test component.
            </summary>
      <returns>The metadata entries.</returns>
    </member>
    <member name="T:MbUnit.Framework.DynamicTestFactoryAttribute">
      <summary>
            Specifies a method that is used to generate tests dynamically at runtime.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.DynamicTestFactoryAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.DynamicTestFactoryAttribute" /> class</summary>
    </member>
    <member name="M:MbUnit.Framework.DynamicTestFactoryAttribute.Execute(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>
            Executes the test method.
            </summary>
      <param name="state">The test instance state, not null.</param>
    </member>
    <member name="T:MbUnit.Framework.EnumDataAttribute">
      <summary>
            Provides a column of enumeration values as a data source.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.EnumDataAttribute.#ctor(System.Type)">
      <summary>
            Adds a column of enumeration values.
            </summary>
      <param name="enumerationType">The type of the enumeration.</param>
      <exception cref="T:System.ArgumentNullException">The specified type is null.</exception>
      <exception cref="T:System.ArgumentException">The specified type is not an enumeration type.</exception>
    </member>
    <member name="P:MbUnit.Framework.EnumDataAttribute.EnumerationType">
      <summary>
            Gets the type of the enumeration.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.EnumDataAttribute.Exclude">
      <summary>
            Sets or gets the single enumeration value that must be excluded from the column.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.EnumDataAttribute.ExcludeArray">
      <summary>
            Sets or gets an array of values that must be excluded from the column.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.EnumDataAttribute.PopulateDataSource(Gallio.Framework.Pattern.IPatternScope,Gallio.Framework.Data.DataSource,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Populates the data source with the contributions of this attribute.
            </summary>
      <param name="scope">The scope.</param>
      <param name="dataSource">The data source.</param>
      <param name="codeElement">The code element.</param>
    </member>
    <member name="T:MbUnit.Framework.ExpectedArgumentExceptionAttribute">
      <summary>
            Declares that the associated test is expected to throw an <see cref="T:System.ArgumentException" />.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ExpectedArgumentExceptionAttribute.#ctor">
      <summary>
            Declares that the associated test is expected to throw an <see cref="T:System.ArgumentOutOfRangeException" />.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ExpectedArgumentExceptionAttribute.#ctor(System.String)">
      <summary>
            Declares that the associated test is expected to throw an <see cref="T:System.ArgumentOutOfRangeException" />.
            </summary>
      <param name="message">The expected exception message, or null if not specified.</param>
    </member>
    <member name="T:MbUnit.Framework.ExpectedArgumentNullExceptionAttribute">
      <summary>
            Declares that the associated test is expected to throw an <see cref="T:System.ArgumentNullException" />.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ExpectedArgumentNullExceptionAttribute.#ctor">
      <summary>
            Declares that the associated test is expected to throw an <see cref="T:System.ArgumentOutOfRangeException" />.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ExpectedArgumentNullExceptionAttribute.#ctor(System.String)">
      <summary>
            Declares that the associated test is expected to throw an <see cref="T:System.ArgumentOutOfRangeException" />.
            </summary>
      <param name="message">The expected exception message, or null if not specified.</param>
    </member>
    <member name="T:MbUnit.Framework.ExpectedArgumentOutOfRangeExceptionAttribute">
      <summary>
            Declares that the associated test is expected to throw an <see cref="T:System.ArgumentOutOfRangeException" />.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ExpectedArgumentOutOfRangeExceptionAttribute.#ctor">
      <summary>
            Declares that the associated test is expected to throw an <see cref="T:System.ArgumentOutOfRangeException" />.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ExpectedArgumentOutOfRangeExceptionAttribute.#ctor(System.String)">
      <summary>
            Declares that the associated test is expected to throw an <see cref="T:System.ArgumentOutOfRangeException" />.
            </summary>
      <param name="message">The expected exception message, or null if not specified.</param>
    </member>
    <member name="T:MbUnit.Framework.ExpectedExceptionAttribute">
      <summary>
            Declares that the associated test is expected to throw an exception of
            a particular type.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ExpectedExceptionAttribute.#ctor(System.Type)">
      <summary>
            Declares that the associated test is expected to throw an exception of
            a particular type.
            </summary>
      <param name="exceptionType">The expected exception type.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="exceptionType" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.ExpectedExceptionAttribute.#ctor(System.Type,System.String)">
      <summary>
            Declares that the associated test is expected to throw an exception of
            a particular type.
            </summary>
      <param name="exceptionType">The expected exception type.</param>
      <param name="message">The expected exception message, or null if not specified.
            May be a substring of the actual exception message.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="exceptionType" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.ExpectedExceptionAttribute.DecorateMethodTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.IMethodInfo)">
      <summary>
            Applies decorations to a method-level test.
            </summary>
      <param name="methodScope">The method scope.</param>
      <param name="method">The method.</param>
    </member>
    <member name="P:MbUnit.Framework.ExpectedExceptionAttribute.ExceptionType">
      <summary>
            Gets the expected exception type.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.ExpectedExceptionAttribute.Message">
      <summary>
            Gets or sets the expected exception message, or null if none specified.
            May be a substring of the actual exception message.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.ExplicitAttribute">
      <summary>
            Indicates that a test should only be run explicitly.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ExplicitAttribute.#ctor">
      <summary>
            Indicates that this test should only run explicitly without providing a reason.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ExplicitAttribute.#ctor(System.String)">
      <summary>
            Indicates that this test should only run explicitly and provides a reason.
            </summary>
      <param name="reason">The reason for which the test should be run explicitly.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="reason" />
            is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.ExplicitAttribute.DecorateTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Applies decorations to a test.
            </summary>
      <param name="scope">The scope.</param>
      <param name="codeElement">The code element.</param>
    </member>
    <member name="P:MbUnit.Framework.ExplicitAttribute.Reason">
      <summary>
            Gets the reason that the test should only run explicitly.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.FactoryAttribute">
      <summary>
            Specifies a factory member that will provide values for a data-driven test.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.FactoryAttribute.#ctor(System.String)">
      <summary>
            Specifies the name of a method, property or field of the fixture
            class that will provide values for a data-driven test.
            </summary>
      <param name="memberName">The factory member name.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="memberName" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.FactoryAttribute.#ctor(System.Type,System.String)">
      <summary>
            Specifies the declaring type and name of a static method, property or field
            that will provide values for a data-driven test.
            </summary>
      <param name="type">The declaring type of the factory.</param>
      <param name="memberName">The factory member name.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="type" />
            or <paramref name="memberName" /> is null.</exception>
    </member>
    <member name="P:MbUnit.Framework.FactoryAttribute.ColumnCount">
      <summary>
            Gets or sets the number of columns produced by the factory, or 0 if unknown.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" /> is
            less than zero.</exception>
    </member>
    <member name="P:MbUnit.Framework.FactoryAttribute.Kind">
      <summary>
            Gets or sets the kind of the factory.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.FactoryAttribute.MemberName">
      <summary>
            Gets the factory member name, never null.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.FactoryAttribute.PopulateDataSource(Gallio.Framework.Pattern.IPatternScope,Gallio.Framework.Data.DataSource,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Populates the data source with the contributions of this attribute.
            </summary>
      <param name="scope">The scope.</param>
      <param name="dataSource">The data source.</param>
      <param name="codeElement">The code element.</param>
    </member>
    <member name="P:MbUnit.Framework.FactoryAttribute.Type">
      <summary>
            Gets the declaring type of the factory, or null if it is assumed to be the fixture class.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.FixtureInitializerAttribute">
      <summary>
            Specifies a method that is to be invoked after a fixture instance has been
            created to complete its initialization before test fixture setup runs.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.FixtureInitializerAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.FixtureInitializerAttribute" /> class</summary>
    </member>
    <member name="M:MbUnit.Framework.FixtureInitializerAttribute.DecorateContainingScope(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.IMethodInfo)">
      <summary>
        <para>
            Applies decorations to the containing test.
            </para>
      </summary>
      <param name="containingScope">The containing scope.</param>
      <param name="method">The method to process.</param>
    </member>
    <member name="M:MbUnit.Framework.FixtureInitializerAttribute.Validate(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.IMethodInfo)">
      <summary>
            Verifies that the attribute is being used correctly.
            </summary>
      <param name="containingScope">The containing scope.</param>
      <param name="method">The method.</param>
      <exception cref="T:Gallio.Framework.Pattern.PatternUsageErrorException">Thrown if the attribute is being used incorrectly.</exception>
    </member>
    <member name="T:MbUnit.Framework.FixtureSetUpAttribute">
      <summary>
            Specifies a method that is to be invoked to set up the state of a fixture
            before any of its tests are executed.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.FixtureSetUpAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.FixtureSetUpAttribute" /> class</summary>
    </member>
    <member name="M:MbUnit.Framework.FixtureSetUpAttribute.DecorateContainingScope(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.IMethodInfo)">
      <summary>
        <para>
            Applies decorations to the containing test.
            </para>
      </summary>
      <param name="containingScope">The containing scope.</param>
      <param name="method">The method to process.</param>
    </member>
    <member name="M:MbUnit.Framework.FixtureSetUpAttribute.Validate(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.IMethodInfo)">
      <summary>
            Verifies that the attribute is being used correctly.
            </summary>
      <param name="containingScope">The containing scope.</param>
      <param name="method">The method.</param>
      <exception cref="T:Gallio.Framework.Pattern.PatternUsageErrorException">Thrown if the attribute is being used incorrectly.</exception>
    </member>
    <member name="T:MbUnit.Framework.FixtureTearDownAttribute">
      <summary>
            Specifies a method that is to be invoked to tear down the state of a fixture
            after all of its tests have been executed.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.FixtureTearDownAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.FixtureTearDownAttribute" /> class</summary>
    </member>
    <member name="M:MbUnit.Framework.FixtureTearDownAttribute.DecorateContainingScope(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.IMethodInfo)">
      <summary>
        <para>
            Applies decorations to the containing test.
            </para>
      </summary>
      <param name="containingScope">The containing scope.</param>
      <param name="method">The method to process.</param>
    </member>
    <member name="M:MbUnit.Framework.FixtureTearDownAttribute.Validate(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.IMethodInfo)">
      <summary>
            Verifies that the attribute is being used correctly.
            </summary>
      <param name="containingScope">The containing scope.</param>
      <param name="method">The method.</param>
      <exception cref="T:Gallio.Framework.Pattern.PatternUsageErrorException">Thrown if the attribute is being used incorrectly.</exception>
    </member>
    <member name="T:MbUnit.Framework.GenerationDataAttribute">
      <summary>
            Provides a column of sequential values as a data source.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.GenerationDataAttribute.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.GenerationDataAttribute.GetGenerator(Gallio.Framework.Pattern.IPatternScope)">
      <summary>
            Returns a generator of random values.
            </summary>
      <param name="scope">The containing scope.</param>
      <returns>A generator.</returns>
    </member>
    <member name="M:MbUnit.Framework.GenerationDataAttribute.PopulateDataSource(Gallio.Framework.Pattern.IPatternScope,Gallio.Framework.Data.DataSource,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Populates the data source with the contributions of this attribute.
            </summary>
      <param name="scope">The scope.</param>
      <param name="dataSource">The data source.</param>
      <param name="codeElement">The code element.</param>
    </member>
    <member name="T:MbUnit.Framework.HeaderAttribute">
      <summary>
            Defines names as aliases for the columns in an indexed data source
            such as those that have been populated by <see cref="T:MbUnit.Framework.RowAttribute" /> or <see cref="T:MbUnit.Framework.ColumnAttribute" />.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.HeaderAttribute.#ctor(System.String[])">
      <summary>
            Defines names as aliases for the columns in an indexed data source.
            </summary>
      <param name="columnNames">The names of the columns in the data source in order by index.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="columnNames" /> or
            if one of the values it contains is null.</exception>
    </member>
    <member name="P:MbUnit.Framework.HeaderAttribute.ColumnNames">
      <summary>
            Gets the array of column names.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.HeaderAttribute.PopulateDataSource(Gallio.Framework.Pattern.IPatternScope,Gallio.Framework.Data.DataSource,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Populates the data source with the contributions of this attribute.
            </summary>
      <param name="scope">The scope.</param>
      <param name="dataSource">The data source.</param>
      <param name="codeElement">The code element.</param>
    </member>
    <member name="T:MbUnit.Framework.IgnoreAttribute">
      <summary>
            Indicates that a test is to be ignored by the framework and will not be run.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.IgnoreAttribute.#ctor">
      <summary>
            Indicates that this test is to be ignored without providing a reason.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.IgnoreAttribute.#ctor(System.String)">
      <summary>
            Indicates that this test is to be ignored and provides a reason.
            </summary>
      <param name="reason">The reason for which the test is to be ignored.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="reason" />
            is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.IgnoreAttribute.DecorateTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Applies decorations to a test.
            </summary>
      <param name="scope">The scope.</param>
      <param name="codeElement">The code element.</param>
    </member>
    <member name="P:MbUnit.Framework.IgnoreAttribute.Reason">
      <summary>
            Gets the reason that the test has been ignored, or an empty string if none.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.ImpersonateAttribute">
      <summary>
            Run a test or a test fixture under another user account.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ImpersonateAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.ImpersonateAttribute" /> class</summary>
    </member>
    <member name="M:MbUnit.Framework.ImpersonateAttribute.DecorateTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Applies decorations to a test.
            </summary>
      <param name="scope">The scope.</param>
      <param name="codeElement">The code element.</param>
    </member>
    <member name="P:MbUnit.Framework.ImpersonateAttribute.Domain">
      <summary>
            Gets or sets the domain where the user is defined.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.ImpersonateAttribute.Password">
      <summary>
            Gets or sets the password.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.ImpersonateAttribute.UserName">
      <summary>
            Gets or sets the user name.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.Importance">
      <summary>
            Specifies the test's relative importance which can be used for classifying tests
            to be executed.
            </summary>
    </member>
    <member name="F:MbUnit.Framework.Importance.Critical">
      <summary>
            Critical importance.
            </summary>
    </member>
    <member name="F:MbUnit.Framework.Importance.Severe">
      <summary>
            Severe importance.  Less important than <see cref="F:MbUnit.Framework.Importance.Critical" />.
            </summary>
    </member>
    <member name="F:MbUnit.Framework.Importance.Serious">
      <summary>
            Serious importance.  Less important than <see cref="F:MbUnit.Framework.Importance.Severe" />.
            </summary>
    </member>
    <member name="F:MbUnit.Framework.Importance.Default">
      <summary>
            Default importance.
            </summary>
    </member>
    <member name="F:MbUnit.Framework.Importance.NoOneReallyCaresAbout">
      <summary>
            Not important.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.ImportanceAttribute">
      <summary>
            Associates a <see cref="T:MbUnit.Framework.Importance" /> with a test fixture, test method,
            test parameter or other test component.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ImportanceAttribute.#ctor(MbUnit.Framework.Importance)">
      <summary>
            Associates a <see cref="T:MbUnit.Framework.Importance" />  with the test component annotated by this attribute.
            </summary>
      <param name="importance">The importance to associate.</param>
    </member>
    <member name="M:MbUnit.Framework.ImportanceAttribute.GetMetadata">
      <summary>
            Gets the metadata key / value pairs to be added to the test component.
            </summary>
      <returns>The metadata entries.</returns>
    </member>
    <member name="P:MbUnit.Framework.ImportanceAttribute.Importance">
      <summary>
            Gets or sets the importance.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.IRetryOptions">
      <summary>
            Specifies options for the <see cref="T:MbUnit.Framework.Retry" /> operation.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.IRetryOptions.DoBetween(Gallio.Common.Action)">
      <summary>
            Specifies a custom action to be executed between each consecutive attempt, but not before the first one.
            </summary>
      <param name="action">A custom action to be executed.</param>
      <returns>An instance to specify other options for the retry operation.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the option was called more than once.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.IRetryOptions.Repeat(System.Int32)">
      <summary>
            Specifies the maximum number of evaluation attempts, before the <see cref="M:MbUnit.Framework.Retry.Until(Gallio.Common.Func{System.Boolean})" />, or 
            <see cref="M:MbUnit.Framework.Retry.Until(System.Threading.WaitHandle)" /> operation fails.
            </summary>
      <param name="repeat">The maximum number of evaluation cycles, or zero or a negative value to specify an unlimited number of attempts.</param>
      <returns>An instance to specify other options for the retry operation.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="M:MbUnit.Framework.IRetryOptions.Repeat(System.Int32)" /> option was called more than once.</exception>
    </member>
    <member name="M:MbUnit.Framework.IRetryOptions.Until(Gallio.Common.Func{System.Boolean})">
      <summary>
            Specifies the condition to evaluate repeatedly, and starts the entire operation.
            </summary>
      <param name="condition">The condition to evaluate.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionFailureException">Thrown when the condition is false, and a timeout occured, or the maximum
            number of evaluation attempts was reached.</exception>
    </member>
    <member name="M:MbUnit.Framework.IRetryOptions.Until(System.Threading.Thread)">
      <summary>
            Specifies a <see cref="T:System.Threading.Thread" /> instance to wait for being terminated, and starts the entire operation.
            </summary>
      <param name="tread">The thread to evaluate.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionFailureException">Thrown when the thread is still alive, and a timeout occured, or the maximum
            number of evaluation attempts was reached.</exception>
    </member>
    <member name="M:MbUnit.Framework.IRetryOptions.Until(System.Threading.WaitHandle)">
      <summary>
            Specifies a <see cref="T:System.Threading.WaitHandle" /> instance to wait for being signaled, and starts the entire operation.
            </summary>
      <param name="waitHandle">The wait handle to evaluate.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionFailureException">Thrown when the wait handle is unsignaled, and a timeout occured, or the maximum
            number of evaluation attempts was reached.</exception>
    </member>
    <member name="M:MbUnit.Framework.IRetryOptions.WithFailureMessage(System.String,System.Object[])">
      <summary>
            Specifies a custom formatted message to be added to the text of the assertion raised when
            the retry operation has failed.
            </summary>
      <param name="messageFormat">A user-supplied assertion failure message string, or null if none.</param>
      <param name="messageArgs">The format arguments, or null or empty if none.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MbUnit.Framework.IRetryOptions.WithPolling(System.Int32)">
      <summary>
            Specifies a polling time expressed in milliseconds between each consecutive evaluation of the condition.
            </summary>
      <param name="milliseconds">The polling time expressed in milliseconds.</param>
      <returns>An instance to specify other options for the retry operation.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the option was called more than once.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="milliseconds" /> is negative.</exception>
    </member>
    <member name="M:MbUnit.Framework.IRetryOptions.WithPolling(System.TimeSpan)">
      <summary>
            Specifies a polling time between each consecutive evaluation of the condition.
            </summary>
      <param name="polling">The polling time.</param>
      <returns>An instance to specify other options for the retry operation.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the option was called more than once.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="polling" /> represents a negative duration.</exception>
    </member>
    <member name="M:MbUnit.Framework.IRetryOptions.WithTimeout(System.Int32)">
      <summary>
            Specifies a timeout value expressed in milliseconds.
            </summary>
      <param name="milliseconds">The timeout value expressed in milliseconds, or a negative value to specify no timeout value.
            A value of zero, will let the condition to be evaluated only once.</param>
      <returns>An instance to specify other options for the retry operation.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the option was called more than once.</exception>
    </member>
    <member name="M:MbUnit.Framework.IRetryOptions.WithTimeout(System.TimeSpan)">
      <summary>
            Specifies a timeout value.
            </summary>
      <param name="timeout">The timeout value, or a negative value to specify no timeout value.
            A value of zero, will let the condition to be evaluated only once.</param>
      <returns>An instance to specify other options for the retry operation.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the option was called more than once.</exception>
    </member>
    <member name="T:MbUnit.Framework.JoinAttribute">
      <summary>
            An abstract class for attributes that specify the join strategy of a test.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.JoinAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.JoinAttribute" /> class</summary>
    </member>
    <member name="M:MbUnit.Framework.JoinAttribute.GetJoinStrategy">
      <summary>
            Gets the join strategy to use.
            </summary>
      <returns>The join strategy.</returns>
    </member>
    <member name="M:MbUnit.Framework.JoinAttribute.Process(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Processes a code element and applies its contributions to the scope of this pattern.
            The scope will typically have been introduced by the <see cref="M:Gallio.Framework.Pattern.IPattern.Consume(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo,System.Boolean)" /> method
            of a primary pattern applied to this code element.
            </summary>
      <param name="scope">The scope.</param>
      <param name="codeElement">The code element to process.</param>
      <exception cref="T:Gallio.Framework.Pattern.PatternUsageErrorException">May be thrown to halt processing of the pattern
            and report an error message to the user as an annotation that describes how the
            pattern was misapplied.</exception>
    </member>
    <member name="M:MbUnit.Framework.JoinAttribute.Validate(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Verifies that the attribute is being used correctly.
            </summary>
      <param name="scope">The scope.</param>
      <param name="codeElement">The code element.</param>
      <exception cref="T:Gallio.Framework.Pattern.PatternUsageErrorException">Thrown if the attribute is being used incorrectly.</exception>
    </member>
    <member name="T:MbUnit.Framework.MetadataAttribute">
      <summary>
            Associates custom metadata with a test fixture, test method, test parameter
            or other test component.  The metadata can be used for documentation, classification
            or dynamic customization of tests.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.MetadataAttribute.#ctor(System.String,System.String)">
      <summary>
            Associates custom metadata with a test component.
            </summary>
      <param name="metadataKey">The metadata key.</param>
      <param name="metadataValue">The metadata value.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="metadataKey" />
            or <paramref name="metadataValue" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.MetadataAttribute.GetMetadata">
      <summary>
            Gets the metadata key / value pairs to be added to the test component.
            </summary>
      <returns>The metadata entries.</returns>
    </member>
    <member name="P:MbUnit.Framework.MetadataAttribute.MetadataKey">
      <summary>
            Gets the metadata key.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.MetadataAttribute.MetadataValue">
      <summary>
            Gets the metadata value.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.MultipleAssertsAttribute">
      <summary>
            Runs the test as if it were surrounded by <see cref="M:MbUnit.Framework.Assert.Multiple(Gallio.Common.Action)" /> so that
            multiple assertion failures within the test are tolerated.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.MultipleAssertsAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.MultipleAssertsAttribute" /> class</summary>
    </member>
    <member name="M:MbUnit.Framework.MultipleAssertsAttribute.DecorateMethodTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.IMethodInfo)">
      <summary>
            Applies decorations to a method-level test.
            </summary>
      <param name="methodScope">The method scope.</param>
      <param name="method">The method.</param>
    </member>
    <member name="T:MbUnit.Framework.MultipleCultureAttribute">
      <summary>
            Run a test or a test fixture under different cultures.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.MultipleCultureAttribute.#ctor(System.String[])">
      <summary>
            Initializes a new instance of the <see cref="T:MbUnit.Framework.MultipleCultureAttribute" /> class.
            </summary>
      <param name="cultures">An array of culture names to run the test under.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="cultures" /> is a null reference.</exception>
    </member>
    <member name="M:MbUnit.Framework.MultipleCultureAttribute.DecorateTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Applies decorations to a test.
            </summary>
      <param name="scope">The scope.</param>
      <param name="codeElement">The code element.</param>
    </member>
    <member name="T:MbUnit.Framework.NameAttribute">
      <summary>
            Overrides the name of a test or test parameter.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.NameAttribute.#ctor(System.String)">
      <summary>
            Overrides the name of a test or test parameter.
            </summary>
      <param name="name">The overridden name.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name" /> is null.</exception>
    </member>
    <member name="P:MbUnit.Framework.NameAttribute.Name">
      <summary>
            Gets the overridden name.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.NameAttribute.Process(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Processes a code element and applies its contributions to the scope of this pattern.
            The scope will typically have been introduced by the <see cref="M:Gallio.Framework.Pattern.IPattern.Consume(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo,System.Boolean)" /> method
            of a primary pattern applied to this code element.
            </summary>
      <param name="scope">The scope.</param>
      <param name="codeElement">The code element to process.</param>
      <exception cref="T:Gallio.Framework.Pattern.PatternUsageErrorException">May be thrown to halt processing of the pattern
            and report an error message to the user as an annotation that describes how the
            pattern was misapplied.</exception>
    </member>
    <member name="M:MbUnit.Framework.NameAttribute.Validate(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Verifies that the attribute is being used correctly.
            </summary>
      <param name="scope">The scope.</param>
      <param name="codeElement">The code element.</param>
      <exception cref="T:Gallio.Framework.Pattern.PatternUsageErrorException">Thrown if the attribute is being used incorrectly.</exception>
    </member>
    <member name="T:MbUnit.Framework.PairwiseJoinAttribute">
      <summary>
            Sets the join strategy of a test to be pairwise.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.PairwiseJoinAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.PairwiseJoinAttribute" /> class</summary>
    </member>
    <member name="M:MbUnit.Framework.PairwiseJoinAttribute.GetJoinStrategy">
      <summary>
            Gets the join strategy to use.
            </summary>
      <returns>The join strategy.</returns>
    </member>
    <member name="T:MbUnit.Framework.ParallelizableAttribute">
      <summary>
            Specifies that a test can be run in parallel with other parallelizable tests.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ParallelizableAttribute.#ctor">
      <summary>
            Specifies that this test is parallelizable.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ParallelizableAttribute.#ctor(MbUnit.Framework.TestScope)">
      <summary>
            Specifies that the tests in the specified scope are parallelizable.
            </summary>
      <param name="scope">The test scope.</param>
    </member>
    <member name="M:MbUnit.Framework.ParallelizableAttribute.DecorateTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Applies decorations to a test.
            </summary>
      <param name="scope">The scope.</param>
      <param name="codeElement">The code element.</param>
    </member>
    <member name="P:MbUnit.Framework.ParallelizableAttribute.Scope">
      <summary>
            Gets the scope to which the parallelizable attribute applies.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.ParameterAttribute">
      <summary>
            Declares that a property, field, method parameter, constructor parameter,
            generic type parameter or generic method parameter represents a test parameter.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ParameterAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.ParameterAttribute" /> class</summary>
    </member>
    <member name="T:MbUnit.Framework.PendingAttribute">
      <summary>
            Indicates that a test has pending prerequisites so it will not be run.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.PendingAttribute.#ctor">
      <summary>
            Indicates that this test has pending prerequisites without providing a reason.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.PendingAttribute.#ctor(System.String)">
      <summary>
            Indicates that this test has pending prerequisites and provides a reason.
            </summary>
      <param name="reason">The reason for which the test is pending.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="reason" />
            is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.PendingAttribute.DecorateTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Applies decorations to a test.
            </summary>
      <param name="scope">The scope.</param>
      <param name="codeElement">The code element.</param>
    </member>
    <member name="P:MbUnit.Framework.PendingAttribute.Reason">
      <summary>
            Gets the reason that the test is pending.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.PrincipalAttribute">
      <summary>
            Run a test or a test fixture under another user account.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.PrincipalAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.PrincipalAttribute" /> class</summary>
    </member>
    <member name="M:MbUnit.Framework.PrincipalAttribute.CreatePrincipal">
      <summary>
            Creates a principal object which represents the security context 
            of the user on whose behalf the test is running.
            </summary>
      <returns>A principal object.</returns>
    </member>
    <member name="M:MbUnit.Framework.PrincipalAttribute.DecorateTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Applies decorations to a test.
            </summary>
      <param name="scope">The scope.</param>
      <param name="codeElement">The code element.</param>
    </member>
    <member name="T:MbUnit.Framework.RandomNumbersAttribute">
      <summary>
            Provides a column of random <see cref="T:System.Decimal" /> values as a data source.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.RandomNumbersAttribute.#ctor">
      <summary>
            Adds a column of random <see cref="T:System.Decimal" /> values.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.RandomNumbersAttribute.Count">
      <summary>
            Gets or sets the number of random values that are going to be generated.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.RandomNumbersAttribute.Filter">
      <summary>
            Gets or sets the name of a method present in the test fixture
            whose purpose is to prevent some specific values to be generated.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.RandomNumbersAttribute.GetGenerator(Gallio.Framework.Pattern.IPatternScope)">
      <summary>
            Returns a generator of random values.
            </summary>
      <param name="scope">The containing scope.</param>
      <returns>A generator.</returns>
    </member>
    <member name="P:MbUnit.Framework.RandomNumbersAttribute.Maximum">
      <summary>
            Gets or sets the upper bound of the numeric range where random values are going to be generated.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.RandomNumbersAttribute.Minimum">
      <summary>
            Gets or sets the lower bound of the numeric range where random values are going to be generated.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.RandomStringsAttribute">
      <summary>
            Provides a column of random <see cref="T:System.String" /> values as a data source.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.RandomStringsAttribute.#ctor">
      <summary>
            Adds a column of random <see cref="T:System.String" /> values.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.RandomStringsAttribute.Count">
      <summary>
            Gets or sets the number of random values that are going to be generated.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.RandomStringsAttribute.Filter">
      <summary>
            Gets or sets the name of a method present in the test fixture
            whose purpose is to prevent some specific values to be generated.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.RandomStringsAttribute.GetGenerator(Gallio.Framework.Pattern.IPatternScope)">
      <summary>
            Returns a generator of random values.
            </summary>
      <param name="scope">The containing scope.</param>
      <returns>A generator.</returns>
    </member>
    <member name="P:MbUnit.Framework.RandomStringsAttribute.Pattern">
      <summary>
            Gets or sets a regular expression pattern to generate random string from.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.RandomStringsAttribute.Stock">
      <summary>
            Gets or sets the stock of predefined strings from which to draw random values.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.RandomStringStock">
      <summary>
            Identifies a stock of predefined string values for the random strings generator.
            </summary>
    </member>
    <member name="F:MbUnit.Framework.RandomStringStock.EnUSMaleNames">
      <summary>
            A predefined collection of random US male names.
            </summary>
    </member>
    <member name="F:MbUnit.Framework.RandomStringStock.EnCountries">
      <summary>
            A predefined collection of random country names.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.RepeatAttribute">
      <summary>
            Decorates a test method and causes it to be invoked repeatedly.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.RepeatAttribute.#ctor(System.Int32)">
      <summary>
            Executes the test method repeatedly.
            </summary>
      <param name="numRepetitions">The number of times to repeat the test.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="numRepetitions" />
            is less than 1.</exception>
    </member>
    <member name="M:MbUnit.Framework.RepeatAttribute.DecorateTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Applies decorations to a test.
            </summary>
      <param name="scope">The scope.</param>
      <param name="codeElement">The code element.</param>
    </member>
    <member name="T:MbUnit.Framework.Retry">
      <summary>
            Evaluates repeatedly the specified condition until it becomes fulfilled, or throws
            a <see cref="T:Gallio.Framework.Assertions.AssertionFailureException" /> if a timeout occured, or if the
            evaluation was done unsuccessfully too many times.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.Retry.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.Retry" /> class</summary>
    </member>
    <member name="M:MbUnit.Framework.Retry.DoBetween(Gallio.Common.Action)">
      <summary>
            Specifies a custom action to be executed between each consecutive attempt, but not before the first one.
            </summary>
      <param name="action">A custom action to be executed.</param>
      <returns>An instance to specify other options for the retry operation.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the option was called more than once.</exception>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="action" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Retry.Repeat(System.Int32)">
      <summary>
            Specifies the maximum number of evaluation attempts, before the <see cref="M:MbUnit.Framework.Retry.Until(Gallio.Common.Func{System.Boolean})" />, or 
            <see cref="M:MbUnit.Framework.Retry.Until(System.Threading.WaitHandle)" /> operation fails.
            </summary>
      <param name="repeat">The maximum number of evaluation cycles, or zero or a negative value to specify an unlimited number of attempts.</param>
      <returns>An instance to specify other options for the retry operation.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the options was called more than once.</exception>
    </member>
    <member name="M:MbUnit.Framework.Retry.Until(Gallio.Common.Func{System.Boolean})">
      <summary>
            Specifies the condition to evaluate repeatedly, and starts the entire operation.
            </summary>
      <param name="condition">The condition to evaluate.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionFailureException">Thrown when the condition is still false, and a timeout occured, or the maximum
            number of evaluation attempts was reached.</exception>
    </member>
    <member name="M:MbUnit.Framework.Retry.Until(System.Threading.Thread)">
      <summary>
            Specifies a <see cref="T:System.Threading.Thread" /> instance to wait for being terminated, and starts the entire operation.
            </summary>
      <param name="tread">The thread to evaluate.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionFailureException">Thrown when the thread is still alive, and a timeout occured, or the maximum
            number of evaluation attempts was reached.</exception>
    </member>
    <member name="M:MbUnit.Framework.Retry.Until(System.Threading.WaitHandle)">
      <summary>
            Specifies a <see cref="T:System.Threading.WaitHandle" /> instance to wait for being signaled, and starts the entire operation.
            </summary>
      <param name="waitHandle">The wait handle to evaluate.</param>
      <exception cref="T:Gallio.Framework.Assertions.AssertionFailureException">Thrown when the wait handle is still unsignaled, and a timeout occured, or the maximum
            number of evaluation attempts was reached.</exception>
    </member>
    <member name="M:MbUnit.Framework.Retry.WithFailureMessage(System.String,System.Object[])">
      <summary>
            Specifies a custom formatted message to be added to the text of the assertion raised when
            the retry operation has failed.
            </summary>
      <param name="messageFormat">A user-supplied assertion failure message string, or null if none.</param>
      <param name="messageArgs">The format arguments, or null or empty if none.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MbUnit.Framework.Retry.WithPolling(System.Int32)">
      <summary>
            Specifies a polling time expressed in milliseconds between each consecutive evaluation of the condition.
            </summary>
      <param name="milliseconds">The polling time expressed in milliseconds.</param>
      <returns>An instance to specify other options for the retry operation.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the option was called more than once.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="milliseconds" /> is negative.</exception>
    </member>
    <member name="M:MbUnit.Framework.Retry.WithPolling(System.TimeSpan)">
      <summary>
            Specifies a polling time between each consecutive evaluation of the condition.
            </summary>
      <param name="polling">The polling time.</param>
      <returns>An instance to specify other options for the retry operation.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the option was called more than once.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="polling" /> represents a negative duration.</exception>
    </member>
    <member name="M:MbUnit.Framework.Retry.WithTimeout(System.Int32)">
      <summary>
            Specifies a timeout value expressed in milliseconds.
            </summary>
      <param name="milliseconds">The timeout value expressed in milliseconds, or a negative value to specify no timeout value.
            A value of zero, will let the condition to be evaluated only once.</param>
      <returns>An instance to specify other options for the retry operation.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the option was called more than once.</exception>
    </member>
    <member name="M:MbUnit.Framework.Retry.WithTimeout(System.TimeSpan)">
      <summary>
            Specifies a timeout value.
            </summary>
      <param name="timeout">The timeout value, or a negative value to specify no timeout value.
            A value of zero, will let the condition to be evaluated only once.</param>
      <returns>An instance to specify other options for the retry operation.</returns>
      <exception cref="T:System.InvalidOperationException">Thrown if the option was called more than once.</exception>
    </member>
    <member name="T:MbUnit.Framework.RollbackAttribute">
      <summary>
            Decorates a test method whose database operation must be executed within a transaction and rolled
            back when it has finished executing.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.RollbackAttribute.#ctor">
      <summary>
            Tags a test method whose database operation must be executed within a transaction and rolled
            back when it has finished executing.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.RollbackAttribute.DecorateTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Applies decorations to a test.
            </summary>
      <param name="scope">The scope.</param>
      <param name="codeElement">The code element.</param>
    </member>
    <member name="P:MbUnit.Framework.RollbackAttribute.IncludeSetUpAndTearDown">
      <summary>
            When set to true, includes setup and teardown in the rollback.  Otherwise
            only transactions performed during the test itself are affected.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.RowAttribute">
      <summary>
            Provides a row of literal values as a data source.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.RowAttribute.#ctor(System.Object[])">
      <summary>
            Adds a row of literal values.
            </summary>
      <param name="values">The array of values in the row.</param>
    </member>
    <member name="M:MbUnit.Framework.RowAttribute.PopulateDataSource(Gallio.Framework.Pattern.IPatternScope,Gallio.Framework.Data.DataSource,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Populates the data source with the contributions of this attribute.
            </summary>
      <param name="scope">The scope.</param>
      <param name="dataSource">The data source.</param>
      <param name="codeElement">The code element.</param>
    </member>
    <member name="P:MbUnit.Framework.RowAttribute.Values">
      <summary>
            Gets the array of values in the row.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.SequentialJoinAttribute">
      <summary>
            Sets the join strategy of a test to be sequential.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.SequentialJoinAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.SequentialJoinAttribute" /> class</summary>
    </member>
    <member name="M:MbUnit.Framework.SequentialJoinAttribute.GetJoinStrategy">
      <summary>
            Gets the join strategy to use.
            </summary>
      <returns>The join strategy.</returns>
    </member>
    <member name="T:MbUnit.Framework.SequentialNumbersAttribute">
      <summary>
            Provides a column of sequential <see cref="T:System.Decimal" /> values as a data source.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.SequentialNumbersAttribute.#ctor">
      <summary>
            Adds a column of sequential <see cref="T:System.Decimal" /> values.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.SequentialNumbersAttribute.Count">
      <summary>
            Gets or sets the length of the sequence.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.SequentialNumbersAttribute.End">
      <summary>
            Gets or sets the ending value of the sequence.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.SequentialNumbersAttribute.Filter">
      <summary>
            Gets or sets the name of a method present in the test fixture
            whose purpose is to prevent some specific values to be generated.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.SequentialNumbersAttribute.GetGenerator(Gallio.Framework.Pattern.IPatternScope)">
      <summary>
            Returns a generator of random values.
            </summary>
      <param name="scope">The containing scope.</param>
      <returns>A generator.</returns>
    </member>
    <member name="P:MbUnit.Framework.SequentialNumbersAttribute.Start">
      <summary>
            Gets or sets the starting value of the sequence.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.SequentialNumbersAttribute.Step">
      <summary>
            Gets or sets the increment between each value of the sequence.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.SetUpAttribute">
      <summary>
            Specifies a method that is to be invoked before each test in a fixture executes
            to set up the state of the test.  
            </summary>
    </member>
    <member name="M:MbUnit.Framework.SetUpAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.SetUpAttribute" /> class</summary>
    </member>
    <member name="T:MbUnit.Framework.SortOrder">
      <summary>
            Expected sorting order for the <see cref="M:MbUnit.Framework.Assert.Sorted``1(System.Collections.Generic.IEnumerable{``0},MbUnit.Framework.SortOrder)" /> assertion.
            </summary>
    </member>
    <member name="F:MbUnit.Framework.SortOrder.Increasing">
      <summary>
            Each value is expected to be greater than or equal to the previous value.
            </summary>
    </member>
    <member name="F:MbUnit.Framework.SortOrder.StrictlyIncreasing">
      <summary>
            Each value is expected to be strictly greater than the previous value.
            </summary>
    </member>
    <member name="F:MbUnit.Framework.SortOrder.Decreasing">
      <summary>
            Each value is expected to be less than or equal to the previous value.
            </summary>
    </member>
    <member name="F:MbUnit.Framework.SortOrder.StrictlyDecreasing">
      <summary>
            Each value is expected to be strictly less than the previous value.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.StaticTestFactoryAttribute">
      <summary>
            Specifies a method that is used to generate tests statically at
            test exploration time.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.StaticTestFactoryAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.StaticTestFactoryAttribute" /> class</summary>
    </member>
    <member name="M:MbUnit.Framework.StaticTestFactoryAttribute.DecorateContainingScope(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.IMethodInfo)">
      <summary>
        <para>
            Applies decorations to the containing test.
            </para>
      </summary>
      <param name="containingScope">The containing scope.</param>
      <param name="method">The method to process.</param>
    </member>
    <member name="M:MbUnit.Framework.StaticTestFactoryAttribute.Validate(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.IMethodInfo)">
      <summary>
            Verifies that the attribute is being used correctly.
            </summary>
      <param name="containingScope">The containing scope.</param>
      <param name="method">The method.</param>
      <exception cref="T:Gallio.Framework.Pattern.PatternUsageErrorException">Thrown if the attribute is being used incorrectly.</exception>
    </member>
    <member name="T:MbUnit.Framework.StructuralEqualityComparer`1">
      <summary>
            A general-purpose structural equality comparer that defines a fully customizable equality operation without the 
            need to implement <see cref="T:System.IEquatable`1" />.
            </summary>
      <typeparam name="T">The type of the objects. to compare.</typeparam>
    </member>
    <member name="M:MbUnit.Framework.StructuralEqualityComparer`1.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.StructuralEqualityComparer`1" /> class</summary>
    </member>
    <member name="M:MbUnit.Framework.StructuralEqualityComparer`1.Add``1(Gallio.Common.Accessor{`0,System.Collections.Generic.IEnumerable{``0}},Gallio.Common.EqualityComparison{``0},MbUnit.Framework.StructuralEqualityComparerOptions)">
      <summary>
            Adds a matching criterion to the structural equality comparer.
            </summary>
      <param name="accessor">An accessor that gets an enumeration of values from the tested object.</param>
      <param name="comparer">A comparer instance for the values returned by the accessor, or null to use the default one.</param>
      <param name="options">Some options indicating how to compare the enumeration of values returned by the accessor.</param>
      <typeparam name="TValue">The type of the value returned by the accessor.</typeparam>
      <exception cref="T:System.ArgumentNullException">The specified accessor argument is a null reference.</exception>
    </member>
    <member name="M:MbUnit.Framework.StructuralEqualityComparer`1.Add``1(Gallio.Common.Accessor{`0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Adds a matching criterion to the structural equality comparer.
            </summary>
      <param name="accessor">An accessor that gets an enumeration of values from the tested object.</param>
      <param name="comparer">A comparer instance for the values returned by the accessor, or null to use the default one.</param>
      <typeparam name="TValue">The type of the value returned by the accessor.</typeparam>
      <exception cref="T:System.ArgumentNullException">The specified accessor argument is a null reference.</exception>
    </member>
    <member name="M:MbUnit.Framework.StructuralEqualityComparer`1.Add``1(Gallio.Common.Accessor{`0,System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0},MbUnit.Framework.StructuralEqualityComparerOptions)">
      <summary>
            Adds a matching criterion to the structural equality comparer.
            </summary>
      <param name="accessor">An accessor that gets an enumeration of values from the tested object.</param>
      <param name="comparer">A comparer instance for the values returned by the accessor, or null to use the default one.</param>
      <param name="options">Some options indicating how to compare the enumeration of values returned by the accessor.</param>
      <typeparam name="TValue">The type of the value returned by the accessor.</typeparam>
      <exception cref="T:System.ArgumentNullException">The specified accessor argument is a null reference.</exception>
    </member>
    <member name="M:MbUnit.Framework.StructuralEqualityComparer`1.Add``1(Gallio.Common.Accessor{`0,``0})">
      <summary>
            Adds a matching criterion to the structural equality comparer.
            </summary>
      <param name="accessor">An accessor that gets a value from the tested object.</param>
      <typeparam name="TValue">The type of the value returned by the accessor.</typeparam>
      <exception cref="T:System.ArgumentNullException">The specified accessor argument is a null reference.</exception>
    </member>
    <member name="M:MbUnit.Framework.StructuralEqualityComparer`1.Add``1(Gallio.Common.Accessor{`0,``0},Gallio.Common.EqualityComparison{``0})">
      <summary>
            Adds a matching criterion to the structural equality comparer.
            </summary>
      <param name="accessor">An accessor that gets a value from the tested object.</param>
      <param name="comparer">A equality comparison delegate to compare the values returned by the accessor, or null to use the default one.</param>
      <typeparam name="TValue">The type of the value returned by the accessor.</typeparam>
      <exception cref="T:System.ArgumentNullException">The specified accessor argument is a null reference.</exception>
    </member>
    <member name="M:MbUnit.Framework.StructuralEqualityComparer`1.Add``1(Gallio.Common.Accessor{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>
            Adds a matching criterion to the structural equality comparer.
            </summary>
      <param name="accessor">An accessor that gets a value from the tested object.</param>
      <param name="comparer">A comparer instance, or null to use the default one (<see cref="P:MbUnit.Framework.StructuralEqualityComparer`1.Default" />).</param>
      <typeparam name="TValue">The type of the value returned by the accessor.</typeparam>
      <exception cref="T:System.ArgumentNullException">The specified accessor argument is a null reference.</exception>
    </member>
    <member name="M:MbUnit.Framework.StructuralEqualityComparer`1.Add(Gallio.Common.EqualityComparison{`0})">
      <summary>
            Adds a matching criterion to the structural equality comparer.
            </summary>
      <param name="comparer">An equality comparison delegate to directly compare two instances, or null to use the default one.</param>
    </member>
    <member name="M:MbUnit.Framework.StructuralEqualityComparer`1.Add(System.Collections.Generic.IEqualityComparer{`0})">
      <summary>
            Adds a matching criterion to the structural equality comparer.
            </summary>
      <param name="comparer">An comparer object to directly compare two instances, or null to use the default one.</param>
    </member>
    <member name="P:MbUnit.Framework.StructuralEqualityComparer`1.Default">
      <summary>
            Gets a default neutral structural equality comparer for the tested type.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.StructuralEqualityComparer`1.Equals(`0,`0)">
      <summary>
            Determines whether the specified objects are equal.
            </summary>
      <param name="x">The first object of type T to compare.</param>
      <param name="y">The second object of type T to compare.</param>
      <returns>true if the specified objects are equal; otherwise, false.</returns>
    </member>
    <member name="M:MbUnit.Framework.StructuralEqualityComparer`1.GetEnumerator">
      <summary>
            Returns a strongly-typed enumerator that iterates through the collection.
            </summary>
      <returns>A strongly-typed enumerator that iterates through the collection.</returns>
    </member>
    <member name="M:MbUnit.Framework.StructuralEqualityComparer`1.GetHashCode(`0)">
      <summary>
            Returns a hash code for the specified object.
            </summary>
      <param name="obj">The object for which a hash code is to be returned.</param>
      <returns>A hash code for the specified object.</returns>
      <exception cref="T:System.ArgumentNullException">The type of obj is a reference type and obj is null.</exception>
    </member>
    <member name="T:MbUnit.Framework.StructuralEqualityComparerOptions">
      <summary>
            Comparison options for the structural equality comparer.
            </summary>
    </member>
    <member name="F:MbUnit.Framework.StructuralEqualityComparerOptions.Default">
      <summary>
            Default options.
            </summary>
    </member>
    <member name="F:MbUnit.Framework.StructuralEqualityComparerOptions.IgnoreEnumerableOrder">
      <summary>
            Compares the two child sequences by ignoring the order of the elements.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.TearDownAttribute">
      <summary>
            Specifies a method that is to be invoked after each test in a fixture executes
            to tear down the state of the test.  
            </summary>
    </member>
    <member name="M:MbUnit.Framework.TearDownAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.TearDownAttribute" /> class</summary>
    </member>
    <member name="T:MbUnit.Framework.Test">
      <summary>
            Describes a test generated either at test exploration time or at test
            execution time by a test factory.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.Test.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.Test" /> class</summary>
    </member>
    <member name="M:MbUnit.Framework.Test.BuildStaticTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Builds a static test during test exploration.
            </summary>
      <param name="containingScope">The containing pattern evaluation scope.</param>
      <param name="declaringCodeElement">The code element that represents the scope in which the test was defined.</param>
    </member>
    <member name="M:MbUnit.Framework.Test.BuildStaticTests(System.Collections.Generic.IEnumerable{MbUnit.Framework.Test},Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Builds a collection of static tests during test exploration.
            </summary>
      <param name="tests">The enumeration of tests to build as children of the containing scope.</param>
      <param name="containingScope">The containing pattern evaluation scope.</param>
      <param name="declaringCodeElement">The code element that represents the scope in which the test was defined.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="containingScope" />, <paramref name="declaringCodeElement" />
            or <paramref name="tests" /> is null or contains a null.</exception>
    </member>
    <member name="M:MbUnit.Framework.Test.RunDynamicTest(Gallio.Common.Reflection.ICodeElementInfo,Gallio.Common.Action,Gallio.Common.Action)">
      <summary>
            Runs a dynamic test during test execution.
            </summary>
      <param name="declaringCodeElement">The code element that represents the scope in which the test was defined.</param>
      <param name="setUp">Optional set-up code to run before the test, or null if none.</param>
      <param name="tearDown">Optional tear-down code to run after the test, or null if none.</param>
    </member>
    <member name="M:MbUnit.Framework.Test.RunDynamicTests(System.Collections.Generic.IEnumerable{MbUnit.Framework.Test},Gallio.Common.Reflection.ICodeElementInfo,Gallio.Common.Action,Gallio.Common.Action)">
      <summary>
            Runs a collection of dynamic tests during test execution.
            </summary>
      <param name="tests">The enumeration of tests to run.</param>
      <param name="declaringCodeElement">The code element that represents the scope in which the test was defined.</param>
      <param name="setUp">Optional set-up code to run before the test, or null if none.</param>
      <param name="tearDown">Optional tear-down code to run after the test, or null if none.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="declaringCodeElement" /> or
            <paramref name="tests" /> is null or contains a null.</exception>
    </member>
    <member name="T:MbUnit.Framework.TestAttribute">
      <summary>
            Specifies that a method represents a single test case within a fixture.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.TestAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.TestAttribute" /> class</summary>
    </member>
    <member name="M:MbUnit.Framework.TestAttribute.Execute(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>
            Executes the test method.
            </summary>
      <param name="state">The test instance state, not null.</param>
    </member>
    <member name="T:MbUnit.Framework.TestCase">
      <summary>
            Describes a test case generated either at test exploration time or at test
            execution time by a test factory.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.TestCase.#ctor(System.String,Gallio.Common.Action)">
      <summary>
            Creates a test case with a delegate to execute as its main body.
            </summary>
      <param name="name">The test case name.</param>
      <param name="execute">The main body of the test case.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name" /> or <paramref name="execute" />
            is null.</exception>
    </member>
    <member name="P:MbUnit.Framework.TestCase.Execute">
      <summary>
            Gets the delegate to run as the main body of the test case.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.TestCase.IsTestCase">
      <summary>
            Returns true if the test represents an individual test case.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.TestCase.Kind">
      <summary>
            Gets the test kind.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.TestCase.OnExecuteSelf">
      <summary>
            Executes the main body of the test, excluding its children (which will
            run afterwards).
            </summary>
    </member>
    <member name="P:MbUnit.Framework.TestCase.SetUp">
      <summary>
            Gets or sets a set-up action to be executed before the test case.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.TestCase.TearDown">
      <summary>
            Gets or sets a tear-down action to be executed after the test case.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.TestDecoratorAttribute">
      <summary>
            An abstract base class for implementing new test decorator behaviors.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.TestDecoratorAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.TestDecoratorAttribute" /> class</summary>
    </member>
    <member name="M:MbUnit.Framework.TestDecoratorAttribute.DecorateTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Applies decorations to a test.
            </summary>
      <param name="scope">The scope.</param>
      <param name="codeElement">The code element.</param>
    </member>
    <member name="M:MbUnit.Framework.TestDecoratorAttribute.Dispose(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>
            Disposes the test.
            </summary>
      <param name="testInstanceState">The test instance state, not null.</param>
    </member>
    <member name="M:MbUnit.Framework.TestDecoratorAttribute.Execute(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>
            Executes the test.
            </summary>
      <param name="testInstanceState">The test instance state, not null.</param>
    </member>
    <member name="M:MbUnit.Framework.TestDecoratorAttribute.Initialize(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>
            Initializes the test.
            </summary>
      <param name="testInstanceState">The test instance state, not null.</param>
    </member>
    <member name="M:MbUnit.Framework.TestDecoratorAttribute.SetUp(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>
            Sets up the test.
            </summary>
      <param name="testInstanceState">The test instance state, not null.</param>
    </member>
    <member name="M:MbUnit.Framework.TestDecoratorAttribute.TearDown(Gallio.Framework.Pattern.PatternTestInstanceState)">
      <summary>
            Tears down the test.
            </summary>
      <param name="testInstanceState">The test instance state, not null.</param>
    </member>
    <member name="T:MbUnit.Framework.TestDefinition">
      <summary>
            Abstract class for custom test definitions such as generated test cases
            and test suites.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.TestDefinition.#ctor(System.String)">
      <summary>
            Creates a test.
            </summary>
      <param name="name">The test name.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.TestDefinition.BuildStaticTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Builds a static test during test exploration.
            </summary>
      <param name="containingScope">The containing pattern evaluation scope.</param>
      <param name="declaringCodeElement">The code element that represents the scope in which the test was defined.</param>
    </member>
    <member name="P:MbUnit.Framework.TestDefinition.CodeElement">
      <summary>
            Gets or sets the code element associated with the test, or null if none.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.TestDefinition.Description">
      <summary>
            Gets or sets the description metadata of the test, or null if none.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.TestDefinition.GetChildren">
      <summary>
            Gets the children of this test.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.TestDefinition.IsTestCase">
      <summary>
            Returns true if the test represents an individual test case.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.TestDefinition.Kind">
      <summary>
            Gets the test kind.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.TestDefinition.Metadata">
      <summary>
            Gets a mutable table of metadata entries associated with the test.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.TestDefinition.Name">
      <summary>
            Gets the test name.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.TestDefinition.OnExecuteSelf">
      <summary>
            Executes the main body of the test, excluding its children (which will
            run afterwards).
            </summary>
    </member>
    <member name="M:MbUnit.Framework.TestDefinition.OnSetupChild">
      <summary>
            Runs set-up code before each child.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.TestDefinition.OnSetupSelf">
      <summary>
            Runs set-up code before execute and before all children.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.TestDefinition.OnTearDownChild">
      <summary>
            Runs tear-down code after each child.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.TestDefinition.OnTearDownSelf">
      <summary>
            Runs tear-down code after execute and after all children.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.TestDefinition.RunDynamicTest(Gallio.Common.Reflection.ICodeElementInfo,Gallio.Common.Action,Gallio.Common.Action)">
      <summary>
            Runs a dynamic test during test execution.
            </summary>
      <param name="declaringCodeElement">The code element that represents the scope in which the test was defined.</param>
      <param name="setUp">Optional set-up code to run before the test, or null if none.</param>
      <param name="tearDown">Optional tear-down code to run after the test, or null if none.</param>
    </member>
    <member name="P:MbUnit.Framework.TestDefinition.Timeout">
      <summary>
            Gets or sets the maximum amount of time the whole test including
            its setup, teardown and body should be permitted to run.
            </summary>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="value" />
            represents a negative time span.</exception>
    </member>
    <member name="T:MbUnit.Framework.TestFixtureAttribute">
      <summary>
            Specifies that a class represents a test fixture.  This attribute is optional.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.TestFixtureAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.TestFixtureAttribute" /> class</summary>
    </member>
    <member name="T:MbUnit.Framework.TestFixtureReference">
      <summary>
            Describes a reference to another test fixture.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.TestFixtureReference.#ctor(System.Type)">
      <summary>
            Creates a reference to a test fixture.
            </summary>
      <param name="testFixtureType">The test fixture type.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="testFixtureType" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.TestFixtureReference.BuildStaticTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Builds a static test during test exploration.
            </summary>
      <param name="containingScope">The containing pattern evaluation scope.</param>
      <param name="declaringCodeElement">The code element that represents the scope in which the test was defined.</param>
    </member>
    <member name="M:MbUnit.Framework.TestFixtureReference.RunDynamicTest(Gallio.Common.Reflection.ICodeElementInfo,Gallio.Common.Action,Gallio.Common.Action)">
      <summary>
            Runs a dynamic test during test execution.
            </summary>
      <param name="declaringCodeElement">The code element that represents the scope in which the test was defined.</param>
      <param name="setUp">Optional set-up code to run before the test, or null if none.</param>
      <param name="tearDown">Optional tear-down code to run after the test, or null if none.</param>
    </member>
    <member name="P:MbUnit.Framework.TestFixtureReference.TestFixtureType">
      <summary>
            Gets the referenced test fixture type, or null if the reference is on a
            test method of the containing test fixture.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.TestScope">
      <summary>
            Specifies the scope to which certain attributes apply.
            </summary>
    </member>
    <member name="F:MbUnit.Framework.TestScope.Self">
      <summary>
            Applies to this test only.
            </summary>
    </member>
    <member name="F:MbUnit.Framework.TestScope.Descendants">
      <summary>
            Applies to the descendants of this test only.
            </summary>
    </member>
    <member name="F:MbUnit.Framework.TestScope.All">
      <summary>
            Applies to this test and its descendants.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.TestsOnAttribute">
      <summary>
            Associates the name of the type under test with a test fixture, test method,
            test parameter or other test component.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.TestsOnAttribute.#ctor(System.String)">
      <summary>
            Associates the full name or assembly qualified name of the type under test
            with the test component annotated by this attribute.
            </summary>
      <param name="typeName">The name of the type under test as obtained by <see cref="P:System.Type.FullName" />
            or <see cref="P:System.Type.AssemblyQualifiedName" />.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="typeName" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.TestsOnAttribute.#ctor(System.Type)">
      <summary>
            Associates the type under test with the test component annotated by this attribute.
            </summary>
      <param name="type">The type under test.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="type" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.TestsOnAttribute.GetMetadata">
      <summary>
            Gets the metadata key / value pairs to be added to the test component.
            </summary>
      <returns>The metadata entries.</returns>
    </member>
    <member name="P:MbUnit.Framework.TestsOnAttribute.TypeName">
      <summary>
            Gets the full name or assembly qualified name of the type under test.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.TestSuite">
      <summary>
            Describes a test suite generated either at test exploration time or at test
            execution time by a test factory.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.TestSuite.#ctor(System.String)">
      <summary>
            Creates a test suite.
            </summary>
      <param name="name">The test suite name.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="name" /> is null.</exception>
    </member>
    <member name="P:MbUnit.Framework.TestSuite.Children">
      <summary>
            Gets a mutable list of the children of this test.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.TestSuite.GetChildren">
      <summary>
            Gets the children of this test.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.TestSuite.IsTestCase">
      <summary>
            Returns true if the test represents an individual test case.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.TestSuite.Kind">
      <summary>
            Gets the test kind.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.TestSuite.OnSetupChild">
      <summary>
            Runs set-up code before each child.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.TestSuite.OnSetupSelf">
      <summary>
            Runs set-up code before execute and before all children.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.TestSuite.OnTearDownChild">
      <summary>
            Runs tear-down code after each child.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.TestSuite.OnTearDownSelf">
      <summary>
            Runs tear-down code after execute and after all children.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.TestSuite.SetUp">
      <summary>
            Gets or sets a delegate to run before each test case in the suite, or null if none.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.TestSuite.SuiteSetUp">
      <summary>
            Gets or sets a delegate to run before all test cases in the suite, or null if none.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.TestSuite.SuiteTearDown">
      <summary>
            Gets or sets a delegate to run after all test cases in the suite, or null if none.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.TestSuite.TearDown">
      <summary>
            Gets or sets a delegate to run after each test case in the suite, or null if none.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.ThreadedRepeatAttribute">
      <summary>
            Decorates a test method and causes it to be invoked repeatedly
            on multiple concurrent threads.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ThreadedRepeatAttribute.#ctor(System.Int32)">
      <summary>
            Executes the test method on the specified number of concurrent threads.
            </summary>
      <param name="numThreads">The number of threads to execute the test on.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="numThreads" />
            is less than 1.</exception>
    </member>
    <member name="M:MbUnit.Framework.ThreadedRepeatAttribute.DecorateTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Applies decorations to a test.
            </summary>
      <param name="scope">The scope.</param>
      <param name="codeElement">The code element.</param>
    </member>
    <member name="T:MbUnit.Framework.TimeoutAttribute">
      <summary>
            Sets the maximum amount of time in seconds that a test or fixture is permitted to run.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.TimeoutAttribute.#ctor(System.Int32)">
      <summary>
            Sets the test timeout in seconds, or zero if none.
            </summary>
      <param name="timeoutSeconds">The timeout in seconds, or zero if none.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="timeoutSeconds" /> is less than 0.</exception>
    </member>
    <member name="M:MbUnit.Framework.TimeoutAttribute.DecorateTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Applies decorations to a test.
            </summary>
      <param name="scope">The scope.</param>
      <param name="codeElement">The code element.</param>
    </member>
    <member name="P:MbUnit.Framework.TimeoutAttribute.Timeout">
      <summary>
            Gets the timeout, or null if none.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.TimeoutAttribute.TimeoutSeconds">
      <summary>
            Gets the test timeout in seconds, or zero if none.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.XmlDataAttribute">
      <summary>
            Provides data from XML contents.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.XmlDataAttribute.#ctor(System.String)">
      <summary>
            Specifies a XML-based data source.
            </summary>
      <param name="itemPath">The XPath expression used to select items within the document.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="itemPath" /> is null.</exception>
    </member>
    <member name="M:MbUnit.Framework.XmlDataAttribute.PopulateDataSource(Gallio.Framework.Pattern.IPatternScope,Gallio.Framework.Data.DataSource,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Populates the data source with the contributions of this attribute.
            </summary>
      <param name="scope">The scope.</param>
      <param name="dataSource">The data source.</param>
      <param name="codeElement">The code element.</param>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.AbstractContract">
      <summary>
            Abstract base class for contracts.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.AbstractContract.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.ContractVerifiers.AbstractContract" /> class</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.AbstractContract.AssertMethodExists(System.Reflection.MethodInfo,System.String)">
      <summary>
            Verifies that the specified method info object is not null, indicating that the
            method exists, otherwise raises an assertion failure and describes the expected method signature.
            </summary>
      <param name="method">The method, or null if missing.</param>
      <param name="methodSignature">The expected method signature for diagnostic output.</param>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.AbstractContract.Context">
      <summary>
            Gets the execution context.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.AbstractContract.GetContractVerificationTests">
      <summary>
            Gets an enumeration of test cases whose purpose is to verify the contract.
            </summary>
      <returns>An enumeration of tests.</returns>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.AbstractContract.GetContractVerificationTests(MbUnit.Framework.ContractVerifiers.Core.ContractVerificationContext)">
      <summary>
            Gets an enumeration of test cases whose purpose is to verify the contract.
            </summary>
      <param name="context">The context of execution.</param>
      <returns>An enumeration of tests.</returns>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.AbstractContract.GetInterface(System.Type,System.Type)">
      <summary>
            Gets the interface of a particular type if it is implemented by another type,
            otherwise returns null.
            </summary>
      <param name="implementationType">The implementation type.</param>
      <param name="interfaceType">The interface type.</param>
      <returns>The interface type or null if it is not implemented by the implementation type.</returns>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.AccessorContract`2">
      <summary>
            Contract for verifying the implementation of public type accessors, usually the getter and the setter of a particular property.
            </summary>
      <typeparam name="TTarget">The type of the tested object which contain the accessors.</typeparam>
      <typeparam name="TValue">The type of the value handled by the accessors.</typeparam>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.AccessorContract`2.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.AccessorContract`2.AcceptNullValue">
      <summary>
            Determines whether the tested accessors are expected to accept a null reference as a valid input.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.AccessorContract`2.DefaultInstance">
      <summary>
            Provides a default instance of the tested type.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.AccessorContract`2.GetContractVerificationTests">
      <summary>
            Gets an enumeration of test cases whose purpose is to verify the contract.
            </summary>
      <returns>An enumeration of tests.</returns>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.AccessorContract`2.Getter">
      <summary>
            Specifies an explicit way to get a value from the tested accessors.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.AccessorContract`2.InvalidValues">
      <summary>
            Defines a collection of incompetence classes which identify object instances that are expected to be not accepted
            by the tested setter. Each incompetence class contains a collection of distinct object instance associated 
            with an expected exception type.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.AccessorContract`2.PropertyName">
      <summary>
            Specifies the name of tested property.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.AccessorContract`2.Setter">
      <summary>
            Specifies an explicit way to set a value to the tested accessors.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.AccessorContract`2.ValidValues">
      <summary>
            Defines a collection of distinct object instances that are expected to be inconditionally accepted as
            valid input by the tested setter. Feeding that contract property with at least one value is mandatory.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.CollectionContract`2">
      <summary>
            Contract for verifying the implementation of the generic <see cref="T:System.Collections.Generic.ICollection`1" />.
            </summary>
      <typeparam name="TCollection">The type of the collection implementing <see cref="T:System.Collections.Generic.ICollection`1" />.</typeparam>
      <typeparam name="TItem">The type of items contained in the collection.</typeparam>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.CollectionContract`2.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.CollectionContract`2.AcceptEqualItems">
      <summary>
            Determines whether the collection is expected to accept several identical items (object equality).
            The default value is true.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.CollectionContract`2.AcceptNullReference">
      <summary>
            Determines whether the collection is expected to accept null references as valid items.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.CollectionContract`2.AssertDistinctIntancesNotEmpty">
      <summary>
            Asserts that the collection of distinct instances specified by the user is not empty.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.CollectionContract`2.CreateNotSupportedWriteTest(System.String,Gallio.Common.Action{`0,`1})">
      <summary>
            Creates a test that invokes an action over the collection, which
            is supposed to not be supported. The test expects that an exception be thrown.
            </summary>
      <param name="methodName">The name of the tested method.</param>
      <param name="invoke">The action to evaluate.</param>
      <returns>
      </returns>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.CollectionContract`2.CreateNullArgumentTest(System.String,System.Action{`0})">
      <summary>
            Creates a test which runs an action over the collection with
            a null argument. The test expects that an exception be thrown.
            </summary>
      <param name="methodName">The name of the tested method.</param>
      <param name="invoke">The action to evaluate.</param>
      <returns>
      </returns>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.CollectionContract`2.DefaultInstance">
      <summary>
            Provides a default instance of the collection to test.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.CollectionContract`2.DistinctInstances">
      <summary>
            Gets a collection of distinct object instances that feeds the different tests.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.CollectionContract`2.GetContractVerificationTests">
      <summary>
            Gets an enumeration of test cases whose purpose is to verify the contract.
            </summary>
      <returns>An enumeration of tests.</returns>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.CollectionContract`2.GetSafeDefaultInstance">
      <summary>
            Returns safely a default instance of the tested type.
            </summary>
      <returns>A new instance of the tested type as specified in the contract.</returns>
      <exception cref="T:Gallio.Framework.Assertions.AssertionFailureException">Thrown if the instance cannot be generated.</exception>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.CollectionContract`2.IsReadOnly">
      <summary>
            Determines whether the tested collection is expected to be read-only.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.ComparisonContract`1">
      <summary>
            Contract for verifying the implementation of the generic <see cref="T:System.IComparable`1" /> interface. 
            </summary>
      <typeparam name="TTarget">The type of the object to evaluate.</typeparam>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.ComparisonContract`1.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.ComparisonContract`1.EquivalenceClasses">
      <summary>
            Gets or sets the collection of equivalence classes of instances
            to feed the contract verifier.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.ComparisonContract`1.GetContractVerificationTests">
      <summary>
            Gets an enumeration of test cases whose purpose is to verify the contract.
            </summary>
      <returns>An enumeration of tests.</returns>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.ComparisonContract`1.ImplementsOperatorOverloads">
      <summary>
            Determines whether the verifier will evaluate the presence and the 
            behavior of the 4 operator overloads "Greater Than", "Greater Than
            Or Equal", "Less Than", and "Less Than Or Equal".
            </summary>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.DistinctInstanceCollection`1">
      <summary>
            A collection of distinct object instances. Every element represents a valid instance
            which is different from all the other elements in the collection (object equality).
            </summary>
      <typeparam name="T">The type of the object instances in the collection.</typeparam>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.DistinctInstanceCollection`1.#ctor">
      <summary>
            Constructs an empty collection of distinct object instances.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.DistinctInstanceCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Constructs acollection of distinct object instances from the specified
            enumeration of elements.
            </summary>
      <param name="distinctInstances">An enumeration of distinct object instances.</param>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.DistinctInstanceCollection`1.Add(`0)">
      <summary>
            Adds the specified instance to the collection.
            </summary>
      <param name="instance">A valid and non-null object instance.</param>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.DistinctInstanceCollection`1.GetEnumerator">
      <summary>
            Returns a strongly-typed enumerator that iterates through the collection.
            </summary>
      <returns>A strongly-typed enumerator.</returns>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.DistinctInstanceCollection`1.Instances">
      <summary>
            Gets all the instances.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.EqualityContract`1">
      <summary>
            Contract for verifying the implementation of the generic <see cref="T:System.IEquatable`1" /> interface. 
            </summary>
      <typeparam name="TTarget">The target tested type which implements the generic <see cref="T:System.IEquatable`1" /> interface.</typeparam>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.EqualityContract`1.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.EqualityContract`1.EquivalenceClasses">
      <summary>
            Gets or sets the collection of equivalence classes of instances
            to feed the contract verifier.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.EqualityContract`1.GetContractVerificationTests">
      <summary>
            Gets an enumeration of test cases whose purpose is to verify the contract.
            </summary>
      <returns>An enumeration of tests.</returns>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.EqualityContract`1.ImplementsOperatorOverloads">
      <summary>
            Determines whether the verifier will evaluate the presence and the 
            behavior of the equality and the inequality operator overloads.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.EquivalenceClass`1">
      <summary>
            Contains a collection of equivalent object instances. 
            </summary>
      <typeparam name="T">The type of equivalent object instances.</typeparam>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.EquivalenceClass`1.#ctor(`0[])">
      <summary>
            Constructs a class of equivalent instances.
            </summary>
      <param name="equivalentInstances">The type of equivalent object instances.</param>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.EquivalenceClass`1.EquivalentInstances">
      <summary>
            Gets the collection of equivalent instances.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.EquivalenceClass`1.GetEnumerator">
      <summary>
            Returns a strongly-typed enumerator that iterates through the collection.
            </summary>
      <returns>A strongly-typed enumerator.</returns>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.EquivalenceClassCollection`1">
      <summary>
            A collection of equivalence classes. 
            </summary>
      <typeparam name="T">The type of equivalent object instances.</typeparam>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.EquivalenceClassCollection`1.#ctor">
      <summary>
            Constructs an empty collection of equivalence classes.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.EquivalenceClassCollection`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Constructs a collection of equivalence classes from the specified distinct object instances.
            </summary>
      <param name="distinctInstances">An enumeration of distinct instances.</param>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.EquivalenceClassCollection`1.Add(`0[])">
      <summary>
            Adds to the collection a new equivalence class which contains the specified objects.
            </summary>
      <param name="equivalentInstances">An array of equivalent instances.</param>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.EquivalenceClassCollection`1.EquivalenceClasses">
      <summary>
            Gets the equivalence classes.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.EquivalenceClassCollection`1.GetEnumerator">
      <summary>
            Returns a strongly-typed enumerator that iterates through the collection.
            </summary>
      <returns>A strongly-typed enumerator.</returns>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.ExceptionContract`1">
      <summary>
            Contract for verifying the implementation of a custom exception type.
            </summary>
      <typeparam name="TException">The target custom exception type.</typeparam>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.ExceptionContract`1.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.ExceptionContract`1.GetContractVerificationTests">
      <summary>
            Gets an enumeration of test cases whose purpose is to verify the contract.
            </summary>
      <returns>An enumeration of tests.</returns>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.ExceptionContract`1.ImplementsSerialization">
      <summary>
            Determines whether the verifier will check for the serialization support. 
            </summary>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.ExceptionContract`1.ImplementsStandardConstructors">
      <summary>
            Determines whether the verifier will check for the presence of
            the recommended standard constructors.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.ExceptionContract`1.RoundTripSerialize(System.Exception)">
      <summary>
            Performs round-trip serialization of the exception and returns the result.
            </summary>
      <param name="instance">The exception instance.</param>
      <returns>The instance produced after serialization and deserialization.</returns>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.IContract">
      <summary>
            Describes a contract that can be verified.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.IContract.GetContractVerificationTests(MbUnit.Framework.ContractVerifiers.Core.ContractVerificationContext)">
      <summary>
            Gets an enumeration of test cases whose purpose is to verify the contract.
            </summary>
      <param name="context">The context of execution.</param>
      <returns>An enumeration of tests.</returns>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.ImmutabilityContract`1">
      <summary>
             Contract for verifying the implementation of an immutable type.
             </summary>
      <typeparam name="TTarget">The target immutable type.</typeparam>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.ImmutabilityContract`1.#ctor">
      <summary>
            Default constructor.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.ImmutabilityContract`1.GetContractVerificationTests">
      <summary>
            Gets an enumeration of test cases whose purpose is to verify the contract.
            </summary>
      <returns>An enumeration of tests.</returns>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.InvalidValuesClass`1">
      <summary>
            A collection of distinct object instances associated with a particular exception type. 
            </summary>
      <typeparam name="T">The type of the object instances in the collection.</typeparam>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.InvalidValuesClass`1.#ctor(System.Type)">
      <summary>
            Constructs an empty collection of distinct object instances associated with an exception type.
            </summary>
      <param name="expectedExceptionType">The type of the expected exception.</param>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.InvalidValuesClass`1.#ctor(System.Type,System.Collections.Generic.IEnumerable{`0})">
      <summary>
            Constructs a collection of distinct object instances associated with an exception type.
            </summary>
      <param name="expectedExceptionType">The type of the exception associated with the object instances in the collection.</param>
      <param name="distinctInvalidInstances">An array of distinct object instances.</param>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.InvalidValuesClass`1.ExpectedExceptionType">
      <summary>
            The type of the exception associated with the object instances in the collection.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.InvalidValuesClassCollection`1">
      <summary>
            A collection of classes of distinct object instances gathered by the type
            of the exception which is expected to be raised when the subject instances are passed
            to a tested method or property.
            </summary>
      <typeparam name="T">The type of the object instances in the inner class collections.</typeparam>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.InvalidValuesClassCollection`1.#ctor">
      <summary>
            Constructs an empty collection of classes of distinct object instances.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.InvalidValuesClassCollection`1.Add(MbUnit.Framework.ContractVerifiers.InvalidValuesClass{`0})">
      <summary>
            Adds the specified class of distinct object instance to the collection.
            </summary>
      <param name="invalidClass">The class to add to the collection.</param>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.InvalidValuesClassCollection`1.Add(System.Type,`0[])">
      <summary>
            Adds a new class of distinct object instances to the collection.
            </summary>
      <param name="expectedException">The exception type to associate with the new class.</param>
      <param name="invalidValues">an array of distinct object instances to populate the new class.</param>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.InvalidValuesClassCollection`1.Count">
      <summary>
            Gets the number of invalid classes in the collection.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.InvalidValuesClassCollection`1.GetEnumerator">
      <summary>
            Returns a strongly-typed enumerator that iterates through the collection.
            </summary>
      <returns>A strongly-typed enumerator.</returns>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.ListContract`2">
      <summary>
            Contract for verifying the implementation of the generic <see cref="T:System.Collections.Generic.IList`1" /> interface.
            </summary>
      <typeparam name="TList">The type of the collection implementing <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
      <typeparam name="TItem">The type of items contained by the list.</typeparam>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.ListContract`2.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.ContractVerifiers.ListContract`2" /> class</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.ListContract`2.GetContractVerificationTests">
      <summary>
            Gets an enumeration of test cases whose purpose is to verify the contract.
            </summary>
      <returns>An enumeration of tests.</returns>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.VerifyContractAttribute">
      <summary>
            Verifies that a contract has been satisfied.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.VerifyContractAttribute.#ctor">
      <summary>Initializes a new instance of the <see cref="T:MbUnit.Framework.ContractVerifiers.VerifyContractAttribute" /> class</summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.VerifyContractAttribute.Consume(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.ICodeElementInfo,System.Boolean)">
      <summary>
            Consumes a code element and applies its contributions to the scope
            provided by a containing pattern.
            </summary>
      <param name="containingScope">The containing scope.</param>
      <param name="codeElement">The code element to process.</param>
      <param name="skipChildren">If true, skips generating child test components.
            Instead the children may be populated on demand using
            <see cref="M:Gallio.Framework.Pattern.IPatternScope.AddDeferredComponentPopulator(Gallio.Framework.Pattern.DeferredComponentPopulator)" />.  The implementation
            may safely ignore the value of this flag so long as subsequent attempts to populate children on
            demand are idempotent (do nothing or have no adverse side-effects).</param>
      <exception cref="T:Gallio.Framework.Pattern.PatternUsageErrorException">May be thrown to halt processing of the pattern
            and report an error message to the user as an annotation that describes how the
            pattern was misapplied.</exception>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.VerifyContractAttribute.GenerateTestsFromContract(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.IFieldInfo,Gallio.Framework.Pattern.IPatternScope)">
      <summary>
            Generates static or dynamic tests from the contract.
            </summary>
      <param name="fieldScope">The field scope.</param>
      <param name="field">The field.</param>
      <param name="containingScope">The containing scope.</param>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.VerifyContractAttribute.InitializeTest(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.IFieldInfo)">
      <summary>
            Initializes a test for a contract verifier field after it has been added to the test model.
            </summary>
      <param name="fieldScope">The field scope.</param>
      <param name="field">The field.</param>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.VerifyContractAttribute.IsPrimary">
      <summary>
            Returns true if this is a primary pattern.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.VerifyContractAttribute.IsTest(Gallio.Framework.Pattern.IPatternEvaluator,Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Returns true if the code element represents a test.
            </summary>
      <param name="evaluator">The evaluator.</param>
      <param name="codeElement">The code element.</param>
      <returns>True if the code element represents a test.</returns>
      <exception cref="T:Gallio.Framework.Pattern.PatternUsageErrorException">May be thrown to halt processing of the pattern
            and report an error message to the user as an annotation that describes how the
            pattern was misapplied.</exception>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.VerifyContractAttribute.Validate(Gallio.Framework.Pattern.IPatternScope,Gallio.Common.Reflection.IFieldInfo)">
      <summary>
            Verifies that the attribute is being used correctly.
            </summary>
      <param name="containingScope">The containing scope.</param>
      <param name="field">The field.</param>
      <exception cref="T:Gallio.Framework.Pattern.PatternUsageErrorException">Thrown if the attribute is being used incorrectly.</exception>
    </member>
    <member name="T:MbUnit.Framework.ContractVerifiers.Core.ContractVerificationContext">
      <summary>
            Execution context of a contract verification test.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.Core.ContractVerificationContext.#ctor(Gallio.Common.Reflection.ICodeElementInfo)">
      <summary>
            Constructs an execution context for the verification tests of a contract verifier.
            </summary>
      <param name="codeElement">The code element for the contract read-only field.</param>
      <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="codeElement" /> is null.</exception>
    </member>
    <member name="P:MbUnit.Framework.ContractVerifiers.Core.ContractVerificationContext.CodeElement">
      <summary>
            Gets the code element for the contract read-only field.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.ContractVerifiers.Core.ContractVerificationContext.GetStackTraceData">
      <summary>
            Gets an artificial stack trace data that points to 
            the contract read-only field.
            </summary>
      <returns>An artificial stack trace data that points to the contract read-only field.</returns>
    </member>
    <member name="T:MbUnit.Framework.Reflection.AccessModifier">
      <summary>
             Access modifier of a class or class member.
            </summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.AccessModifier.Public">
      <summary>
             Public.
            </summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.AccessModifier.NonPublic">
      <summary>
             Protected, internal, private.
            </summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.AccessModifier.Static">
      <summary>
            Static.
            </summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.AccessModifier.Default">
      <summary>
            Default that includes public, protected, internal, private, and static.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.Reflection.MemberType">
      <summary>
             Member types of a class.
            </summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.MemberType.Method">
      <summary>
             Method.
            </summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.MemberType.Field">
      <summary>
            Field or variable.
            </summary>
    </member>
    <member name="F:MbUnit.Framework.Reflection.MemberType.Property">
      <summary>
             Property.
            </summary>
    </member>
    <member name="T:MbUnit.Framework.Reflection.ReflectionException">
      <summary>
            Indicates that a reflection operation performed by <see cref="T:MbUnit.Framework.Reflection.Reflector" /> failed.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.Reflection.ReflectionException.#ctor">
      <summary>
            Creates an exception.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.Reflection.ReflectionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Creates an exception from serialization info.
            </summary>
      <param name="info">The serialization info.</param>
      <param name="context">The streaming context.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.ReflectionException.#ctor(System.String)">
      <summary>
            Creates an exception.
            </summary>
      <param name="message">The message.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.ReflectionException.#ctor(System.String,System.Exception)">
      <summary>
            Creates an exception.
            </summary>
      <param name="message">The message.</param>
      <param name="innerException">The inner exception.</param>
    </member>
    <member name="T:MbUnit.Framework.Reflection.Reflector">
      <summary>
             Helper class to test non-public classes and class members.
            </summary>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.#ctor(System.Object)">
      <summary>
            Constructor for object.
            </summary>
      <param name="obj">Object to be referred to in methods.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.#ctor(System.String,System.String)">
      <summary>
            Use this constructor if you plan to test default constructor of a non-public class.
            </summary>
      <param name="assemblyName">Assembly name.</param>
      <param name="typeName">Type name.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.#ctor(System.String,System.String,System.Object[])">
      <summary>
            Use this constructor if you plan to test constructor with arguments of a non-public class.
            </summary>
      <param name="assemblyName">Assembly name.</param>
      <param name="typeName">Type name.</param>
      <param name="args">Parameters for a constructor.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.CreateInstance(System.String,System.String)">
      <summary>
            Creates an instance
            </summary>
      <param name="assemblyName">Full assembly path.</param>
      <param name="typeName">Type Name such as (System.String).</param>
      <returns>Newly created object.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.CreateInstance(System.String,System.String,System.Object[])">
      <summary>
            Creates an instance
            </summary>
      <param name="assemblyName">Full assembly path.</param>
      <param name="typeName">Type Name such as (System.String)</param>
      <param name="args">Constructor parameters.</param>
      <returns>Newly created object.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String)">
      <summary>
            Gets the field value.
            </summary>
      <param name="access">Specify field access modifier.</param>
      <param name="obj">Object where field is defined.</param>
      <param name="fieldName">Field name.</param>
      <returns>Field value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Boolean)">
      <summary>
            Gets the field value.
            </summary>
      <param name="access">Specify field access modifier.</param>
      <param name="obj">Object where field is defined.</param>
      <param name="fieldName">Field name.</param>
      <param name="lookInBase">Specify if need to look in Base classes.</param>
      <returns>Field value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(System.Object,System.String)">
      <summary>
            Gets the public, non-public, or static field value.
            </summary>
      <param name="obj">Object where field is defined.</param>
      <param name="fieldName">Field name.</param>
      <returns>Field value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(System.String)">
      <summary>
            Gets the public, non-public, or static field value.
            </summary>
      <param name="fieldName">Field name.</param>
      <returns>Field value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(System.String,MbUnit.Framework.Reflection.AccessModifier)">
      <summary>
            Gets the field value.
            </summary>
      <param name="fieldName">Field name.</param>
      <param name="access">Specify field access modifier.</param>
      <returns>Field value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetField(System.String,MbUnit.Framework.Reflection.AccessModifier,System.Boolean)">
      <summary>
            Gets the field value.
            </summary>
      <param name="fieldName">Field name.</param>
      <param name="access">Specify field access modifier.</param>
      <param name="lookInBase">Specify if need to look in Base classes.</param>
      <returns>Field value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String)">
      <summary>
            Gets the property value.
            </summary>
      <param name="access">Specify property access modifier.</param>
      <param name="obj">Object that has the property.</param>
      <param name="propertyName">Property Name.</param>
      <returns>Property Value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Boolean)">
      <summary>
            Gets the property value.
            </summary>
      <param name="access">Specify property access modifier.</param>
      <param name="obj">Object that has the property.</param>
      <param name="propertyName">Property Name.</param>
      <param name="lookInBase">Set to true if need look for the property in base classes.</param>
      <returns>Property Value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(MbUnit.Framework.Reflection.AccessModifier,System.String)">
      <summary>
            Get the property value
            </summary>
      <param name="access">Specify property access modifier.</param>
      <param name="propertyName">Property Name.</param>
      <returns>Property Value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(MbUnit.Framework.Reflection.AccessModifier,System.String,System.Boolean)">
      <summary>
            Get the property value.
            </summary>
      <param name="access">Specify property access modifier.</param>
      <param name="propertyName">Property Name.</param>
      <param name="lookInBase">Specify if need to look in Base classes.</param>
      <returns>Property Value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(System.Object,System.String)">
      <summary>
            Gets the property value.
            </summary>
      <param name="obj">Object where property is defined.</param>
      <param name="propertyName">Property Name.</param>
      <returns>Property Value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.GetProperty(System.String)">
      <summary>
            Gets the property value
            </summary>
      <param name="propertyName">Property Name.</param>
      <returns>Property Value.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Boolean,System.Object[])">
      <summary>
            Executes a non-public method with arguments on a object
            </summary>
      <param name="access">Specify method access modifier.</param>
      <param name="obj">Object where method is defined.</param>
      <param name="methodName">Method to call.</param>
      <param name="lookInBase">Speicifies if to search for the method in the base classes or not.</param>
      <param name="methodParams">Method's parameters.</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Object[])">
      <summary>
            Executes a non-public method with arguments on a object
            </summary>
      <param name="access">Specify method access modifier.</param>
      <param name="obj">Object where method is defined.</param>
      <param name="methodName">Method to call.</param>
      <param name="methodParams">Method's parameters.</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(MbUnit.Framework.Reflection.AccessModifier,System.String,System.Object[])">
      <summary>
            Executes a non-public method with arguments on a object
            </summary>
      <param name="methodName">Method to call.</param>
      <param name="access">Specify method access modifier.</param>
      <param name="methodParams">Method's parameters.</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(System.Object,System.String)">
      <summary>
            Executes a non-public method with arguments on a object
            </summary>
      <param name="obj">Object where method is defined.</param>
      <param name="methodName">Method to call.</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(System.Object,System.String,System.Object[])">
      <summary>
            Executes a non-public method with arguments on a object
            </summary>
      <param name="obj">Object where method is defined.</param>
      <param name="methodName">Method to call.</param>
      <param name="methodParams">Method's parameters.</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(System.String)">
      <summary>
            Executes a non-public method with arguments on a object
            </summary>
      <param name="methodName">Method to call.</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.InvokeMethod(System.String,System.Object[])">
      <summary>
            Executes a non-public method with arguments on a object
            </summary>
      <param name="methodName">Method to call.</param>
      <param name="methodParams">Method's parameters.</param>
      <returns>The object the method should return.</returns>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetField(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Object)">
      <summary>
            Sets the field value.
            </summary>
      <param name="access">Specify field access modifier.</param>
      <param name="obj">Object where field is defined.</param>
      <param name="fieldName">Field Name.</param>
      <param name="fieldValue">Field Value.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetField(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Object,System.Boolean)">
      <summary>
            Sets the field value.
            </summary>
      <param name="access">Specify field access modifier.</param>
      <param name="obj">Object where field is defined.</param>
      <param name="fieldName">Field Name.</param>
      <param name="fieldValue">Field Value.</param>
      <param name="lookInBase">Specify if need to look in Base classes.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetField(MbUnit.Framework.Reflection.AccessModifier,System.String,System.Object)">
      <summary>
            Sets the field value.
            </summary>
      <param name="fieldName">Field Name.</param>
      <param name="fieldValue">Field Value.</param>
      <param name="access">Specify field access modifier.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetField(System.Object,System.String,System.Object)">
      <summary>
            Sets the field value.
            </summary>
      <param name="obj">Object where field is defined.</param>
      <param name="fieldName">Field Name.</param>
      <param name="fieldValue">Field Value.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetField(System.String,System.Object)">
      <summary>
            Sets the field value.
            </summary>
      <param name="fieldName">Field Name.</param>
      <param name="fieldValue">Field Value.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetProperty(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Object)">
      <summary>
            Sets the property value.
            </summary>
      <param name="access">Specify property access modifier.</param>
      <param name="obj">Object where property is defined.</param>
      <param name="propertyName">Property Name.</param>
      <param name="propertyValue">Property Value.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetProperty(MbUnit.Framework.Reflection.AccessModifier,System.Object,System.String,System.Object,System.Boolean)">
      <summary>
            Sets the property value.
            </summary>
      <param name="access">Specify property access modifier.</param>
      <param name="obj">Object where property is defined.</param>
      <param name="propertyName">Property Name.</param>
      <param name="propertyValue">Property Value.</param>
      <param name="lookInBase">Set to true if need look for the property in base classes.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetProperty(MbUnit.Framework.Reflection.AccessModifier,System.String,System.Object)">
      <summary>
            Sets the property value.
            </summary>
      <param name="access">Specify property access modifier.</param>
      <param name="propertyName">Property Name.</param>
      <param name="propertyValue">Property Value.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetProperty(System.Object,System.String,System.Object)">
      <summary>
            Sets the property value.
            </summary>
      <param name="obj">Object where property is defined.</param>
      <param name="propertyName">Property Name.</param>
      <param name="propertyValue">Property Value.</param>
    </member>
    <member name="M:MbUnit.Framework.Reflection.Reflector.SetProperty(System.String,System.Object)">
      <summary>
            Sets the property value.
            </summary>
      <param name="propertyName">Property Name.</param>
      <param name="propertyValue">Property Value.</param>
    </member>
  </members>
</doc>